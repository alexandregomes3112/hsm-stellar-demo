"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const constants = __importStar(require("../hsm/constants"));
class Aap {
    /**
     * @internal
     * Create a new AAP header buffer from an id and a length
     * @param {number} id - The id of the AAP header
     * @param {number} len - The length of the AAP header
     * @param {number} buffSize - The size of the buffer to create (default: constants.AAP_HDR_LEN)
     * @param {number[]} falgs - The flags to set in the AAP header
     * @returns {AapHdr} - The AAP header object
     */
    static create(id, len, buffSize = constants.AAP_HDR_LEN) {
        if (buffSize < constants.AAP_HDR_LEN)
            throw new Error(`Buffer size must be at least ${constants.AAP_HDR_LEN} bytes`);
        const buf = Buffer.alloc(buffSize);
        // Write the id in the buffer as a 32 bit unsigned integer
        buf.writeUInt32LE(id, 0);
        // Convert the length to binary and then to a number that can be represented in 32 bits
        // this is necessary because the length can be greater than 32 bits when using BigInt
        const lenInBinary = BigInt.asUintN(32, BigInt(len)).toString(2);
        // Write the length in the buffer as a 32 bit unsigned integer
        buf.writeUInt32LE(parseInt(lenInBinary, 2), 4);
        return buf;
    }
    /**
     * @internal
     * Create a new AAP object from a buffer
     * @param {Buffer} buf - The buffer to create the AAP object from
     * @returns {AapHdr} - The AAP object
     */
    static read(buf) {
        return {
            id: buf.readUInt32LE(0),
            len: buf.readUInt32LE(4),
        };
    }
    static hasError(aap) {
        return aap.id === constants.NOTIFY_ERR;
    }
}
exports.default = Aap;
