import { MESSAGE_TYPES } from "../hsm/enums";
/**
 * A singleton class that logs messages to the console
 */
export default class Logger {
    /**
     * @internal
     * Log file stream
     */
    private static _logFile;
    /**
     * @internal
     * The log level for when the message type is INFO
     */
    private static infoLevel;
    /**
     * @internal
     * The log level for when the message type is WARN
     */
    private static warnLevel;
    /**
     * @internal
     * The log level for when the message type is ERROR
     */
    private static errorLevel;
    /**
     * @internal
     * The log level configured by the user in the environment variable HSM_LOG_LEVEL
     * @default 0
     * @example
     * ```js
     * process.env.HSM_LOG_LEVEL = "1"; // INFO
     * process.env.HSM_LOG_LEVEL = "2"; // WARN
     * process.env.HSM_LOG_LEVEL = "3"; // ERROR
     * ```
     */
    static get logLevel(): number;
    /**
     * @internal
     * If the log level is greater than or equal to the info level, the info message will be logged
     */
    static get showInfo(): boolean;
    /**
     * @internal
     * If the log level is greater than or equal to the warn level, the warn message will be logged
     */
    static get showWarn(): boolean;
    /**
     * @internal
     * If the log level is greater than or equal to the error level, the error message will be logged
     */
    static get showError(): boolean;
    /**
     * Creates a new instance of the Logger class
     * @param {string} message - The message to log
     * @param {MESSAGE_TYPES} type - The type of message to log
     * @returns {void}
     * @example
     * ```js
     * Logger.log("Hello World!", MessageTypes.INFO);
     */
    static log(message: string, type?: MESSAGE_TYPES): void;
    /**
     * Logs an info message to the console
     * @param {string} message - The message to log
     * @returns {void}
     * @example
     * ```js
     * Logger.info("Hello World!");
     * ```
     */
    static info(message: string): void;
    /**
     * Logs an error message to the console
     * @param {string} message - The message to log
     * @returns {void}
     * @example
     * ```js
     * Logger.error("Hello World!");
     * ```
     */
    static error(message: string): void;
    /**
     * Logs a warning message to the console
     * @param {string} message - The message to log
     * @returns {void}
     * @example
     * ```js
     * Logger.warn("Hello World!");
     * ```
     */
    static warn(message: string): void;
    /**
     * Parse an object to string
     * @param obj - The object to parse
     * @returns {string} - The parsed object
     */
    static objToString(obj: unknown): string;
    /**
     * Output the message to the console or to a file
     * @param msg
     * @returns {void}
     */
    static outPut(msg: string): void;
}
