"use strict";
// The MIT License (MIT)
//
// Copyright (c) 2014 Allan Stewart
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
//     The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// adapted from https://github.com/allan-stewart/node-aes-cmac
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.aesCmac = void 0;
const crypto_1 = __importDefault(require("crypto"));
const const_Zero = new Buffer('00000000000000000000000000000000', 'hex');
const const_Rb = new Buffer('00000000000000000000000000000087', 'hex');
const const_blockSize = 16;
const generateSubkeys = function (key) {
    const l = aes(key, const_Zero);
    let subkey1 = bitShiftLeft(l);
    if (l[0] & 0x80) {
        subkey1 = xor(subkey1, const_Rb);
    }
    let subkey2 = bitShiftLeft(subkey1);
    if (subkey1[0] & 0x80) {
        subkey2 = xor(subkey2, const_Rb);
    }
    return { subkey1: subkey1, subkey2: subkey2 };
};
function aes(key, message) {
    const keyLengthToCipher = { 16: 'aes-128-cbc' };
    if (!keyLengthToCipher[key.length]) {
        throw new Error('Keys must be 128 bits in length.');
    }
    const cipher = crypto_1.default.createCipheriv(keyLengthToCipher[key.length], key, const_Zero);
    const result = cipher.update(message);
    cipher.final();
    return result;
}
const aesCmac = function (key, message) {
    const subkeys = generateSubkeys(key);
    let blockCount = Math.ceil(message.length / const_blockSize);
    let lastBlockCompleteFlag, lastBlock;
    if (blockCount === 0) {
        blockCount = 1;
        lastBlockCompleteFlag = false;
    }
    else {
        lastBlockCompleteFlag = (message.length % const_blockSize === 0);
    }
    const lastBlockIndex = blockCount - 1;
    if (lastBlockCompleteFlag) {
        lastBlock = xor(getMessageBlock(message, lastBlockIndex), subkeys.subkey1);
    }
    else {
        lastBlock = xor(getPaddedMessageBlock(message, lastBlockIndex), subkeys.subkey2);
    }
    let x = new Buffer('00000000000000000000000000000000', 'hex');
    let y;
    for (let index = 0; index < lastBlockIndex; index++) {
        y = xor(x, getMessageBlock(message, index));
        x = aes(key, y);
    }
    y = xor(lastBlock, x);
    return aes(key, y);
};
exports.aesCmac = aesCmac;
function getMessageBlock(message, blockIndex) {
    const block = new Buffer(const_blockSize);
    const start = blockIndex * const_blockSize;
    const end = start + const_blockSize;
    message.copy(block, 0, start, end);
    return block;
}
function getPaddedMessageBlock(message, blockIndex) {
    const block = new Buffer(const_blockSize);
    const start = blockIndex * const_blockSize;
    const end = message.length;
    block.fill(0);
    message.copy(block, 0, start, end);
    block[end - start] = 0x80;
    return block;
}
const bitShiftLeft = function (buffer) {
    const shifted = new Buffer(buffer.length);
    const last = buffer.length - 1;
    for (let index = 0; index < last; index++) {
        shifted[index] = buffer[index] << 1;
        if (buffer[index + 1] & 0x80) {
            shifted[index] += 0x01;
        }
    }
    shifted[last] = buffer[last] << 1;
    return shifted;
};
const xor = function (bufferA, bufferB) {
    const length = Math.min(bufferA.length, bufferB.length);
    const output = new Buffer(length);
    for (let index = 0; index < length; index++) {
        output[index] = bufferA[index] ^ bufferB[index];
    }
    return output;
};
