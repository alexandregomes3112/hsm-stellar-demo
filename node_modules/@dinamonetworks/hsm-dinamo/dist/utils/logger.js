"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const enums_1 = require("../hsm/enums");
const process = __importStar(require("process"));
/**
 * A singleton class that logs messages to the console
 */
class Logger {
    /**
     * @internal
     * The log level configured by the user in the environment variable HSM_LOG_LEVEL
     * @default 0
     * @example
     * ```js
     * process.env.HSM_LOG_LEVEL = "1"; // INFO
     * process.env.HSM_LOG_LEVEL = "2"; // WARN
     * process.env.HSM_LOG_LEVEL = "3"; // ERROR
     * ```
     */
    static get logLevel() {
        const logLevel = process?.env?.HSM_LOG_LEVEL;
        if (!logLevel) {
            return 0;
        }
        return parseInt(logLevel);
    }
    /**
     * @internal
     * If the log level is greater than or equal to the info level, the info message will be logged
     */
    static get showInfo() {
        return Logger.logLevel >= Logger.infoLevel;
    }
    /**
     * @internal
     * If the log level is greater than or equal to the warn level, the warn message will be logged
     */
    static get showWarn() {
        return Logger.logLevel >= Logger.warnLevel;
    }
    /**
     * @internal
     * If the log level is greater than or equal to the error level, the error message will be logged
     */
    static get showError() {
        return Logger.logLevel >= Logger.errorLevel;
    }
    /**
     * Creates a new instance of the Logger class
     * @param {string} message - The message to log
     * @param {MESSAGE_TYPES} type - The type of message to log
     * @returns {void}
     * @example
     * ```js
     * Logger.log("Hello World!", MessageTypes.INFO);
     */
    static log(message, type = enums_1.MESSAGE_TYPES.INFO) {
        const timestamp = new Date().toISOString();
        const logMsg = `${timestamp} - ${type.toUpperCase()}: ${message}`;
        Logger.outPut(logMsg + "\n");
    }
    /**
     * Logs an info message to the console
     * @param {string} message - The message to log
     * @returns {void}
     * @example
     * ```js
     * Logger.info("Hello World!");
     * ```
     */
    static info(message) {
        if (Logger.showInfo) {
            Logger.log(message, enums_1.MESSAGE_TYPES.INFO);
        }
    }
    /**
     * Logs an error message to the console
     * @param {string} message - The message to log
     * @returns {void}
     * @example
     * ```js
     * Logger.error("Hello World!");
     * ```
     */
    static error(message) {
        if (Logger.showError) {
            Logger.log(message, enums_1.MESSAGE_TYPES.ERROR);
        }
    }
    /**
     * Logs a warning message to the console
     * @param {string} message - The message to log
     * @returns {void}
     * @example
     * ```js
     * Logger.warn("Hello World!");
     * ```
     */
    static warn(message) {
        if (Logger.showWarn) {
            Logger.log(message, enums_1.MESSAGE_TYPES.WARN);
        }
    }
    /**
     * Parse an object to string
     * @param obj - The object to parse
     * @returns {string} - The parsed object
     */
    static objToString(obj) {
        const objData = JSON.parse(JSON.stringify(obj));
        const objString = [];
        for (const key in objData) {
            let value = objData[key];
            if (String(key).toLowerCase().includes("password")) {
                value = "********";
            }
            objString.push(`${key}=${value}`);
        }
        return objString.join(" ");
    }
    /**
     * Output the message to the console or to a file
     * @param msg
     * @returns {void}
     */
    static outPut(msg) {
        if (Logger?._logFile?.write) {
            Logger._logFile.write(msg);
            return;
        }
        const logFilePath = process?.env?.HSM_LOG_DIR;
        if (!logFilePath) {
            process.stdout.write(msg);
            return;
        }
        const date = new Date();
        const logFileName = `dinamo-client-${date.getTime()}.log`;
        if (!fs_1.default.existsSync(logFilePath)) {
            fs_1.default.mkdirSync(logFilePath);
        }
        if (!fs_1.default.existsSync(path_1.default.join(logFilePath, logFileName))) {
            fs_1.default.writeFileSync(path_1.default.join(logFilePath, logFileName), "");
        }
        Logger._logFile = fs_1.default.createWriteStream(path_1.default.join(logFilePath, logFileName), { flags: "a+" });
        Logger._logFile.write(msg);
    }
}
/**
 * @internal
 * The log level for when the message type is INFO
 */
Logger.infoLevel = 1;
/**
 * @internal
 * The log level for when the message type is WARN
 */
Logger.warnLevel = 2;
/**
 * @internal
 * The log level for when the message type is ERROR
 */
Logger.errorLevel = 3;
exports.default = Logger;
