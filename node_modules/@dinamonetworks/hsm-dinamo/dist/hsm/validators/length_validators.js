"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.maxLengthValidate = maxLengthValidate;
exports.minLengthValidate = minLengthValidate;
exports.betweenValidate = betweenValidate;
exports.lengthValidate = lengthValidate;
const exceptions = __importStar(require("../exceptions"));
/**
 * @internal
 * Verifica se o tamanho do dado é menor ou igual ao tamanho máximo.
 * @param {MaxLengthOptions} options Opções para validação.
 */
function maxLengthValidate(options) {
    const { data, attribute, max, required, reject } = options;
    if ((required && !data) || data.length === 0) {
        reject(new exceptions.InvalidParameterError(`The ${attribute ? attribute : "data"} is required.`));
    }
    let { message } = options;
    if (!message) {
        message = `The ${attribute ? attribute : "data"} must be less than or equal to ${max}.`;
    }
    if (data.length > max) {
        if (!message.endsWith(".")) {
            message += ".";
        }
        reject(new exceptions.InvalidParameterError(`${message} Please check the documentation.`));
    }
}
/**
 * @internal
 * Verifica se o tamanho do dado é maior ou igual ao tamanho mínimo.
 * @param {MinLengthOptions} options Opções para validação.
 */
function minLengthValidate(options) {
    const { data, attribute, min, required, reject } = options;
    if ((required && !data) || data.length === 0) {
        reject(new exceptions.InvalidParameterError(`The ${attribute ? attribute : "data"} is required.`));
    }
    let { message } = options;
    if (!message) {
        message = `The ${attribute ? attribute : "data"} must be greater than or equal to ${min}.`;
    }
    if (data.length < min) {
        if (!message.endsWith(".")) {
            message += ".";
        }
        reject(new exceptions.InvalidParameterError(`${message} Please check the documentation.`));
    }
}
/**
 * @internal
 * Verifica se o tamanho do dado está entre o tamanho mínimo e o tamanho máximo.
 * @param {BetweenLengthOptions} options Opções para validação.
 */
function betweenValidate(options) {
    const { data, attribute, min, max, required, reject } = options;
    if ((required && !data) || data.length === 0) {
        reject(new exceptions.InvalidParameterError(`The ${attribute ? attribute : "data"} is required.`));
    }
    let { message } = options;
    if (!message) {
        message = `The ${attribute ? attribute : "data"} must be between ${min} and ${max}.`;
    }
    if (data.length < min || data.length > max) {
        if (!message.endsWith(".")) {
            message += ".";
        }
        reject(new exceptions.InvalidParameterError(`${message} Please check the documentation.`));
    }
}
/**
 * @internal
 * Verifica se o tamanho do dado é exatamente igual ao tamanho informado.
 * @param {MaxLengthOptions} options Opções para validação.
 */
function lengthValidate(options) {
    const { data, attribute, length, required, reject } = options;
    if ((required && !data) || data.length === 0) {
        reject(new exceptions.InvalidParameterError(`The ${attribute ? attribute : "data"} is required.`));
    }
    let { message } = options;
    if (!message) {
        message = `The ${attribute ? attribute : "data"} equal to ${length}.`;
    }
    if (data.length !== length) {
        if (!message.endsWith(".")) {
            message += ".";
        }
        reject(new exceptions.InvalidParameterError(`${message} Please check the documentation.`));
    }
}
