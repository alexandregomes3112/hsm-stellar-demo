"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.enumValidate = enumValidate;
const exceptions = __importStar(require("../exceptions"));
/**
 * @internal
 * Valida se o valor informado está contido no array de opções
 * @param {number | string} value - Valor a ser validado
 * @param {Array<object>} options - Array de opções
 * @param {string} message - Mensagem de erro
 * @param {(reason?: unknown) => void} reject - Função de rejeição
 */
function enumValidate(value, options, message, reject) {
    let valid = false;
    if (Array.isArray(options)) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        valid = options
            .map((v) => Object.values(v))
            .flat()
            .includes(value);
    }
    else {
        valid = Object.values(options).includes(value);
    }
    if (!message.endsWith(".")) {
        message += ".";
    }
    if (!valid) {
        reject(new exceptions.InvalidParameterError(`${message} Please check the documentation.`));
    }
}
