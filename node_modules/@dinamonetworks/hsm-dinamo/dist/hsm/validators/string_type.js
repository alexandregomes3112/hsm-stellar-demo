"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.base64Validate = base64Validate;
const exceptions = __importStar(require("../exceptions"));
/**
 * @internal
 * Verifica se o dado é um base64 válido.
 */
function base64Validate(options) {
    const { attribute, required, reject } = options;
    let { message, data } = options;
    data = String(data);
    if ((required && !data) || data.length === 0) {
        reject(new exceptions.InvalidParameterError(`The ${attribute ? `attribute ${attribute}` : "data"} is required.`));
    }
    if (!message) {
        message = `The ${attribute ? `attribute ${attribute}` : "data"} must be a valid base64 string.`;
    }
    if (!isBase64(data)) {
        reject(new exceptions.InvalidParameterError(`${message} Please check the documentation.`));
    }
}
function isBase64(base64String) {
    try {
        // Attempt to decode the string
        const decodedString = atob(base64String);
        // Check if the decoded string can be re-encoded to match the original
        const encodedString = btoa(decodedString);
        // If the re-encoded string matches the original, it's valid base64
        return encodedString === base64String;
    }
    catch (error) {
        // If an error occurs during decoding, it's not valid base64
        return false;
    }
}
