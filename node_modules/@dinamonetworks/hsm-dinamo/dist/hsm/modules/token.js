"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const hsm_base_module_1 = __importDefault(require("./hsm_base_module"));
const constants = __importStar(require("../constants"));
const exceptions = __importStar(require("../exceptions"));
const utils_1 = require("../../utils");
class Token extends hsm_base_module_1.default {
    constructor(conn) {
        super(conn);
    }
    create(flags, cks, from, to, secret, keyName) {
        // Default value
        const type = constants.D_SVAULT_T_TKR2;
        return new Promise((resolve, reject) => {
            const payLoadLen = (constants.SIZE_OF_UINT_8 * 5) + constants.SVAULT_MAX_TK_LEN + constants.AAP_MAX_OBJ_ID;
            const tokenBuf = utils_1.Aap.create(constants.MOD_SVAULT_TOKEN, payLoadLen, payLoadLen + constants.AAP_HDR_LEN);
            let offset = constants.AAP_HDR_LEN;
            tokenBuf.fill(flags, offset, offset + constants.SIZE_OF_UINT_8);
            offset += constants.SIZE_OF_UINT_8;
            tokenBuf.fill(cks, offset, offset + constants.SIZE_OF_UINT_8);
            offset += constants.SIZE_OF_UINT_8;
            tokenBuf.fill(type, offset, offset + constants.SIZE_OF_UINT_8);
            offset += constants.SIZE_OF_UINT_8;
            tokenBuf.fill(from, offset, offset + constants.SIZE_OF_UINT_8);
            offset += constants.SIZE_OF_UINT_8;
            tokenBuf.fill(to, offset, offset + constants.SIZE_OF_UINT_8);
            offset += constants.SIZE_OF_UINT_8;
            tokenBuf.fill(secret, offset, offset + secret.length);
            offset += constants.MOD_SVAULT_MAX_TL;
            tokenBuf.fill(keyName, offset, offset + keyName.length);
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error creating token", aapHdr.len));
                    return;
                }
                utils_1.Logger.info("Token created");
                resolve(data.subarray(constants.AAP_HDR_LEN, constants.AAP_HDR_LEN + aapHdr.len));
            });
            this.conn.once("error", (err) => {
                reject(err);
            });
            this.conn.write(tokenBuf);
        });
    }
    getSecret(maskedData, keyName, mask) {
        return new Promise((resolve, reject) => {
            const payloadLen = constants.MAX_OBJ_FQN_LEN + constants.MOD_SVAULT_MAX_TL + 805;
            const getMaskedDataBuf = utils_1.Aap.create(constants.MOD_SVAULT_SECRET, payloadLen, payloadLen + constants.AAP_HDR_LEN);
            let offset = constants.AAP_HDR_LEN;
            getMaskedDataBuf.fill(keyName, offset, offset + keyName.length);
            offset += constants.MAX_OBJ_FQN_LEN;
            if (mask) {
                getMaskedDataBuf.fill(mask, offset, offset + mask.length);
            }
            offset += constants.MOD_SVAULT_MAX_TL;
            getMaskedDataBuf.fill(maskedData, offset, offset + maskedData.length);
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error getting masked data", aapHdr.len));
                    return;
                }
                utils_1.Logger.info("Masked data retrieved");
                const secret = data.subarray(constants.AAP_HDR_LEN, constants.AAP_HDR_LEN + aapHdr.len);
                const bodyLen = (constants.SIZE_OF_UINT_8 * 5) + constants.SVAULT_MAX_TK_LEN + constants.AAP_MAX_OBJ_ID;
                let offset = 0;
                // Initialization vector
                const iv = secret.subarray(offset, constants.TK_GCM_IV_LEN);
                offset += constants.TK_GCM_IV_LEN;
                const tag = secret.subarray(offset, constants.TK_GCM_TAG_LEN);
                offset += constants.TK_GCM_TAG_LEN;
                const sv_tks_t = secret.subarray(offset, bodyLen);
                offset += bodyLen;
                const token = secret.subarray(offset, secret.length);
                resolve(data);
            });
            this.conn.once("error", (err) => {
                reject(err);
            });
            this.conn.write(getMaskedDataBuf);
        });
    }
    getToken(maskedData, keyName, mask) {
        throw new Error("Method not implemented.");
    }
}
exports.default = Token;
