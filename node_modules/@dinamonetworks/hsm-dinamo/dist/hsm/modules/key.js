"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants = __importStar(require("../constants"));
const enums = __importStar(require("../enums"));
const exceptions = __importStar(require("../exceptions"));
const hsm_base_module_1 = __importDefault(require("./hsm_base_module"));
const utils_1 = require("../../utils");
const validators = __importStar(require("../validators"));
class Key extends hsm_base_module_1.default {
    constructor(conn) {
        super(conn);
    }
    create(name, algorithm, exportable = false, temporary = false, blockchain = false) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(name, reject);
            const payloadLen = (constants.SIZE_OF_UINT_32 * 2) + constants.AAP_MAX_OBJ_ID;
            let keyFlag = 0;
            if (temporary) {
                keyFlag |= constants.TEMPORARY_KEY;
            }
            if (exportable) {
                keyFlag |= constants.EXPORTABLE_KEY;
            }
            if (blockchain) {
                keyFlag |= constants.BCHAIN_KEY;
            }
            const buf = utils_1.Aap.create(constants.MOD_CORE_CREATE_KEY, payloadLen, constants.AAP_HDR_LEN + payloadLen);
            buf.writeUint32LE(algorithm, constants.AAP_HDR_LEN);
            buf.writeUint32LE(keyFlag, constants.AAP_HDR_LEN + constants.SIZE_OF_UINT_32);
            if (name != null) {
                buf.write(name, constants.AAP_HDR_LEN + (constants.SIZE_OF_UINT_32 * 2));
            }
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error on create key", aapHdr.len));
                    return;
                }
                utils_1.Logger.info(`Key created successfully`);
                resolve(true);
            });
            this.conn.once("error", (err) => {
                reject(new exceptions.HsmError(err.message));
            });
            this.conn.write(buf);
        });
    }
    delete(name) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(name, reject);
            this.deleteObject(name).then(resolve).catch(reject);
        });
    }
    block(name) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(name, reject);
            this.blockUnblockObject(name, constants.MSBO_OP_BLOCK).then(resolve).catch(reject);
        });
    }
    unblock(name) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(name, reject);
            this.blockUnblockObject(name, constants.MSBO_OP_UNBLOCK).then(resolve).catch(reject);
        });
    }
    importCertificate(name, certData) {
        return new Promise((resolve, reject) => {
            return this.importBlob(name, certData)
                .then(resolve)
                .catch(reject);
        });
    }
    generatePKCS10(keyName, dn, hashAlgorith) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(keyName, reject);
            const x500Info = this.x500DistinguishedNameToBuffer(dn);
            const hasHash = hashAlgorith && Number.isInteger(hashAlgorith);
            const payloadLen = constants.MAX_OBJ_FQN_LEN + (constants.SIZE_OF_UINT_8 * (hasHash ? 2 : 1)) + constants.MOD_CORE_P10_CSR_DN_MAX_LEN + 1;
            const p10Buff = utils_1.Aap.create(constants.MOD_CORE_P10_CSR, payloadLen, constants.AAP_HDR_LEN + payloadLen);
            let offset = constants.AAP_HDR_LEN;
            p10Buff.write(keyName, offset);
            offset += constants.MAX_OBJ_FQN_LEN;
            p10Buff.writeUint8(constants.MOD_CORE_P10_CSR_VERSION1, offset);
            offset += constants.SIZE_OF_UINT_8;
            p10Buff.write(x500Info, offset);
            offset += constants.MOD_CORE_P10_CSR_DN_MAX_LEN + 1;
            if (hasHash) {
                p10Buff.writeUint8(hashAlgorith, offset);
            }
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error on generate PKCS#10", aapHdr.len));
                    return;
                }
                utils_1.Logger.info("PKCS#10 generated successfully");
                resolve(data.subarray(constants.AAP_HDR_LEN));
            });
            this.conn.once("error", (err) => {
                reject(new exceptions.HsmError(err.message));
            });
            this.conn.write(p10Buff);
        });
    }
    exportAsymmetricPub(name, x509 = false) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(name, reject);
            const payloadLen = constants.MAX_OBJ_FQN_LEN;
            let aapPayloadLen = payloadLen;
            if (x509) {
                aapPayloadLen |= constants.MOD_CORE_ASYM_EXP_FLAG_X509;
            }
            const buf = utils_1.Aap.create(constants.MOD_CORE_ASYM_EXP, aapPayloadLen, constants.AAP_HDR_LEN + payloadLen);
            let offset = constants.AAP_HDR_LEN;
            buf.write(name, offset);
            offset += constants.MAX_OBJ_FQN_LEN;
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error on export asymmetric key", aapHdr.len));
                    return;
                }
                utils_1.Logger.info("Asymmetric key exported successfully");
                resolve(data.subarray(constants.AAP_HDR_LEN));
            });
            this.conn.once("error", (err) => {
                reject(new exceptions.HsmError(err.message));
            });
            this.conn.write(buf);
        });
    }
    exportAsymmetricPriv(name) {
        return new Promise((resolve, reject) => {
            this.objectExport(name)
                .then(resolve)
                .catch(reject);
        });
    }
    exportSymmetric(name) {
        return new Promise((resolve, reject) => {
            this.objectExport(name)
                .then(resolve)
                .catch(reject);
        });
    }
    exportCertClearText(name) {
        return new Promise((resolve, reject) => {
            this.objectExport(name)
                .then(resolve)
                .catch(reject);
        });
    }
    importKekWrap(mode, pad, name, kekKeyName, objType, data, iv, exportable, temporary, blockchain) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(name, reject);
            validators.keyNameValidator(kekKeyName, reject);
            if (mode === enums.KEK_MODE.MODE_CBC) {
                validators.lengthValidate({
                    length: constants.INTERACTION_VECTOR_LEN,
                    data: iv,
                    attribute: "iv",
                    required: true,
                    reject
                });
            }
            else {
                iv = undefined;
            }
            let attr = 0;
            if (temporary) {
                attr |= constants.TEMPORARY_KEY;
            }
            if (exportable) {
                attr |= constants.EXPORTABLE_KEY;
            }
            if (blockchain) {
                attr |= constants.BCHAIN_KEY;
            }
            this.kekWrapOp(constants.MOD_CORE_KEK_WRAP_OBJ_IMPORT, mode, pad, name, kekKeyName, iv, objType, attr, data)
                .then(r => resolve(r))
                .catch(reject);
        });
    }
    exportKekWrap(mode, pad, name, kekKeyName, iv) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(name, reject);
            validators.keyNameValidator(kekKeyName, reject);
            if (mode === enums.KEK_MODE.MODE_CBC) {
                validators.lengthValidate({
                    length: constants.INTERACTION_VECTOR_LEN,
                    data: iv,
                    attribute: "iv",
                    required: true,
                    reject
                });
            }
            else {
                iv = undefined;
            }
            this.kekWrapOp(constants.MOD_CORE_KEK_WRAP_OBJ_EXPORT, mode, pad, name, kekKeyName, iv)
                .then(r => resolve(r))
                .catch(reject);
        });
    }
    exportPKCS8(name, password) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(name, reject);
            validators.betweenValidate({
                min: constants.P8_IMPORT_EXPORT_SECRET_MIN_LEN,
                max: constants.P8_IMPORT_EXPORT_SECRET_MAX_LEN,
                data: password,
                attribute: "password",
                required: true,
                reject
            });
            const payloadLen = constants.MAX_OBJ_FQN_LEN + constants.MOD_CORE_P8_EXPORT_PWD_LEN;
            const buf = utils_1.Aap.create(constants.MOD_CORE_P8_EXPORT, (payloadLen | constants.MC_SO_FLAG_FQN), constants.AAP_HDR_LEN + payloadLen);
            let offset = constants.AAP_HDR_LEN;
            buf.write(name, offset);
            offset += constants.MAX_OBJ_FQN_LEN;
            buf.write(password, offset);
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error on export object", aapHdr.len));
                    return;
                }
                utils_1.Logger.info("Object exported successfully");
                resolve(data.subarray(constants.AAP_HDR_LEN));
            });
            this.conn.once("error", (err) => {
                reject(new exceptions.HsmError(err.message));
            });
            this.conn.write(buf);
        });
    }
    importPKCS8(name, keyType, password, p8, exportable = false, temporary = false, blockchain = false) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(name, reject);
            validators.betweenValidate({
                min: constants.P8_IMPORT_EXPORT_SECRET_MIN_LEN,
                max: constants.P8_IMPORT_EXPORT_SECRET_MAX_LEN,
                data: password,
                attribute: "password",
                required: true,
                reject
            });
            p8 = p8.replace(/-----BEGIN ENCRYPTED PRIVATE KEY-----([\s\S]*?)-----END ENCRYPTED PRIVATE KEY-----/g, '$1')
                .replace(/\n/g, '')
                .trim();
            const payloadLen = (constants.SIZE_OF_UINT_32 * 2) + constants.MAX_OBJ_FQN_LEN + constants.MOD_CORE_P8_EXPORT_PWD_LEN + 1 + p8.length;
            const p8Buff = utils_1.Aap.create(constants.MOD_CORE_P8_IMPORT, (payloadLen | constants.MC_SO_FLAG_FQN), constants.AAP_HDR_LEN + payloadLen);
            let offset = constants.AAP_HDR_LEN;
            p8Buff.writeUint32LE(keyType, offset);
            offset += constants.SIZE_OF_UINT_32;
            let attributes = 0;
            if (exportable) {
                attributes |= constants.EXPORTABLE_KEY;
            }
            if (temporary) {
                attributes |= constants.TEMPORARY_KEY;
            }
            if (blockchain) {
                attributes |= constants.BCHAIN_KEY;
            }
            p8Buff.writeUint32LE(attributes, offset);
            offset += constants.SIZE_OF_UINT_32;
            p8Buff.write(name, offset);
            offset += constants.MAX_OBJ_FQN_LEN;
            p8Buff.write(password, offset);
            offset += constants.MOD_CORE_P8_EXPORT_PWD_LEN + 1;
            p8Buff.write(p8, offset, "base64");
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error on import key", aapHdr.len));
                    return;
                }
                utils_1.Logger.info("Key imported successfully");
                resolve(true);
            });
            this.conn.once("error", (err) => {
                reject(new exceptions.HsmError(err.message));
            });
            this.conn.write(p8Buff);
        });
    }
    import(name, keyType, data, exportable = false, temporary = false, blockchain = false) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(name, reject);
            validators.maxLengthValidate({
                data: data,
                max: constants.MAX_OBJ_V1_RAW_LEN,
                attribute: "data",
                required: true,
                reject,
            });
            const payloadLen = (2 * constants.SIZE_OF_UINT_32) + constants.MAX_OBJ_FQN_LEN + data.length;
            const buf = utils_1.Aap.create(constants.MOD_CORE_KEY_IMP, (payloadLen | constants.MC_SO_FLAG_FQN), constants.AAP_HDR_LEN + payloadLen);
            let offset = constants.AAP_HDR_LEN;
            buf.writeUint32LE(keyType, offset);
            offset += constants.SIZE_OF_UINT_32;
            let attr = 0;
            if (temporary) {
                attr |= constants.TEMPORARY_KEY;
            }
            if (exportable) {
                attr |= constants.EXPORTABLE_KEY;
            }
            if (blockchain) {
                attr |= constants.BCHAIN_KEY;
            }
            buf.writeUint32LE(attr, offset);
            offset += constants.SIZE_OF_UINT_32;
            buf.write(name, offset);
            offset += constants.MAX_OBJ_FQN_LEN;
            buf.fill(data, offset, offset + data?.length);
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error on import key", aapHdr.len));
                    return;
                }
                utils_1.Logger.info(`Key imported successfully`);
                resolve(true);
            });
            this.conn.once("error", (err) => {
                reject(new exceptions.HsmError(err.message));
            });
            this.conn.write(buf);
        });
    }
    importBlob(name, certData) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(name, reject);
            const dataLen = certData.length;
            const payloadLen = constants.MAX_OBJ_FQN_LEN + constants.SIZE_OF_UINT_32 + dataLen;
            const certBuff = utils_1.Aap.create(constants.MOD_CORE_CREATE_BLOB, (payloadLen | constants.MC_SO_FLAG_FQN), constants.AAP_HDR_LEN + payloadLen);
            let offset = constants.AAP_HDR_LEN;
            certBuff.write(name, offset);
            offset += constants.MAX_OBJ_FQN_LEN;
            certBuff.writeUint32LE(dataLen, offset);
            offset += constants.SIZE_OF_UINT_32;
            certData.copy(certBuff, offset);
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error on import certificate", aapHdr.len));
                    return;
                }
                utils_1.Logger.info("Certificate imported successfully");
                resolve(true);
            });
            this.conn.once("error", (err) => {
                reject(new exceptions.HsmError(err.message));
            });
            this.conn.write(certBuff);
        });
    }
    x500DistinguishedNameToBuffer(dn) {
        const dnItems = [];
        const escape = (str) => str.replace(/\//g, '\\/');
        Object.entries(dn).forEach(([key, value]) => {
            if (value != null && value.length > 0) {
                if (Array.isArray(value)) {
                    value.forEach((item) => {
                        dnItems.push(`/${key}=${escape(item)}`);
                    });
                }
                else {
                    dnItems.push(`/${key}=${escape(value)}`);
                }
            }
        });
        return dnItems.join('');
    }
    objectExport(name) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(name, reject);
            const payloadLen = constants.MAX_OBJ_FQN_LEN + constants.SIZE_OF_UINT_32;
            const buf = utils_1.Aap.create(constants.MOD_CORE_OBJ_EXP, payloadLen, constants.AAP_HDR_LEN + payloadLen);
            let offset = constants.AAP_HDR_LEN;
            buf.write(name, offset);
            offset += constants.MAX_OBJ_FQN_LEN;
            // Writing option flags to the buffer
            //
            // const attr = BigInt.asUintN(32, BigInt(constants.MOD_CORE_ATTR_RAW));
            // buf.writeUInt32LE(Number(attr), offset);
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error on export object", aapHdr.len));
                    return;
                }
                utils_1.Logger.info("Object exported successfully");
                resolve(data.subarray(constants.AAP_HDR_LEN));
            });
            this.conn.once("error", (err) => {
                reject(new exceptions.HsmError(err.message));
            });
            this.conn.write(buf);
        });
    }
    kekWrapOp(op, mode, pad, name, kekKeyName, iv, objType, attr, data) {
        return new Promise((resolve, reject) => {
            validators.keyNameValidator(name, reject);
            data = data;
            const payloadLen = (3 * constants.SIZE_OF_UINT_8) + constants.INTERACTION_VECTOR_LEN + (2 * constants.MAX_OBJ_FQN_LEN) + (2 * constants.SIZE_OF_UINT_32) + (data?.length || 0);
            const buf = utils_1.Aap.create(constants.MOD_CORE_KEK_WRAP_OBJ, payloadLen, constants.AAP_HDR_LEN + payloadLen);
            let offset = constants.AAP_HDR_LEN;
            buf.writeUInt8(op, offset);
            offset += constants.SIZE_OF_UINT_8;
            buf.writeUInt8(mode, offset);
            offset += constants.SIZE_OF_UINT_8;
            buf.writeUInt8(pad, offset);
            offset += constants.SIZE_OF_UINT_8;
            if (iv) {
                buf.write(iv, offset, "hex");
            }
            offset += constants.INTERACTION_VECTOR_LEN;
            buf.write(kekKeyName, offset);
            offset += constants.MAX_OBJ_FQN_LEN;
            buf.write(name, offset);
            offset += constants.MAX_OBJ_FQN_LEN;
            if (op === constants.MOD_CORE_KEK_WRAP_OBJ_IMPORT) {
                buf.writeUint32LE(objType, offset);
                offset += constants.SIZE_OF_UINT_32;
                buf.writeUint32LE(attr, offset);
                offset += constants.SIZE_OF_UINT_32;
                buf.fill(data, offset, offset + data?.length);
            }
            const keyArr = [];
            let keyLen = 0;
            let headerRead = false;
            const cb = (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (!headerRead) {
                    headerRead = true;
                    if (utils_1.Aap.hasError(aapHdr)) {
                        reject(new exceptions.HsmError("Error on export KEK", aapHdr.len));
                        return;
                    }
                    keyLen = aapHdr.len;
                    this.conn.once("data", cb);
                    return;
                }
                keyLen -= data.length;
                keyArr.push(data);
                if (keyLen === 0) {
                    utils_1.Logger.info("Key successfully exported using KEK");
                    resolve(Buffer.concat(keyArr));
                }
                this.conn.once("data", cb);
            };
            if (op === constants.MOD_CORE_KEK_WRAP_OBJ_EXPORT) {
                this.conn.once("data", cb);
            }
            else {
                this.conn.once("data", (data) => {
                    const aapHdr = utils_1.Aap.read(data);
                    if (utils_1.Aap.hasError(aapHdr)) {
                        reject(new exceptions.HsmError("Error on import KEK", aapHdr.len));
                        return;
                    }
                    utils_1.Logger.info("Key successfully imported using KEK");
                    resolve(true);
                });
            }
            this.conn.once("error", (err) => {
                reject(new exceptions.HsmError(err.message));
            });
            this.conn.write(buf);
        });
    }
    importPKCS12(keyName, certName, password, p12, pubKey, exportable, temporary) {
        return new Promise((resolve, reject) => {
            try {
                validators.keyNameValidator(keyName, reject);
                validators.keyNameValidator(certName, reject);
                validators.betweenValidate({
                    min: constants.P8_IMPORT_EXPORT_SECRET_MIN_LEN,
                    max: constants.P8_IMPORT_EXPORT_SECRET_MAX_LEN,
                    data: password,
                    attribute: "password",
                    required: true,
                    reject,
                });
                const infoLen = constants.SIZE_OF_UINT_32 +
                    (constants.MAX_OBJ_FQN_LEN * 3) +
                    constants.MOD_CORE_P8_IMPORT_PWD_LEN + 1;
                const payloadLen = infoLen + p12.length;
                const p12Buff = utils_1.Aap.create(constants.MOD_CORE_P12_IMPORT, payloadLen, constants.AAP_HDR_LEN + payloadLen);
                let offset = constants.AAP_HDR_LEN;
                let attributes = 0;
                if (exportable) {
                    attributes |= constants.EXPORTABLE_KEY;
                }
                if (temporary) {
                    attributes |= constants.TEMPORARY_KEY;
                }
                p12Buff.writeUint32LE(attributes, offset);
                offset += constants.SIZE_OF_UINT_32;
                if (pubKey) {
                    p12Buff.write(pubKey, offset);
                }
                offset += constants.MAX_OBJ_FQN_LEN;
                p12Buff.write(keyName, offset);
                offset += constants.MAX_OBJ_FQN_LEN;
                p12Buff.write(certName, offset);
                offset += constants.MAX_OBJ_FQN_LEN;
                p12Buff.write(password, offset);
                offset += constants.MOD_CORE_P8_EXPORT_PWD_LEN + 1;
                p12Buff.fill(p12, offset, offset + p12?.length);
                this.conn.once("data", (data) => {
                    const aapHdr = utils_1.Aap.read(data);
                    if (utils_1.Aap.hasError(aapHdr)) {
                        reject(new exceptions.HsmError("Error on import key", aapHdr.len));
                        return;
                    }
                    utils_1.Logger.info("Key imported successfully");
                    resolve(true);
                });
                this.conn.once("error", (err) => {
                    reject(new exceptions.HsmError(err.message));
                });
                this.conn.write(p12Buff);
            }
            catch (error) {
                reject(error);
            }
        });
    }
}
exports.default = Key;
