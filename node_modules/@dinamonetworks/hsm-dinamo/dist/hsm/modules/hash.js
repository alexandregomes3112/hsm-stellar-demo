"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants = __importStar(require("../constants"));
const exceptions = __importStar(require("../exceptions"));
const hsm_base_module_1 = __importDefault(require("./hsm_base_module"));
const utils_1 = require("../../utils");
class Hash extends hsm_base_module_1.default {
    constructor(conn) {
        super(conn);
    }
    /**
     * Inicializa um contexto de hash para ser usado com um fluxo de dados. Esse contexto Ã© usado para chamadas subsequentes entre outras.
     * @param {enums.HASH_ALGORITHMS} algorithm - Algoritmo de hash
     * @param {string | null} keyName - Nome da chave de hash
     * @returns {Promise<Buffer>} - Retorna um buffer com o contexto de hash inicializado
     */
    create(algorithm, keyName) {
        return new Promise((resolve, reject) => {
            const payloadLen = constants.SIZE_OF_UINT_8 + constants.MAX_OBJ_FQN_LEN;
            const hashBuf = utils_1.Aap.create(constants.MOD_CORE_HASH_START, payloadLen, constants.AAP_HDR_LEN + payloadLen);
            let offset = constants.AAP_HDR_LEN;
            hashBuf.fill(algorithm, offset, offset + constants.SIZE_OF_UINT_8);
            offset += constants.SIZE_OF_UINT_8;
            if (!(0, utils_1.isHashKeyNull)(algorithm) && keyName != null) {
                hashBuf.fill(keyName, offset, offset + keyName.length);
            }
            this.conn.on("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error on create hash", aapHdr.len));
                    return;
                }
                utils_1.Logger.info("Hash created successfully");
                resolve(data.subarray(constants.AAP_HDR_LEN, constants.AAP_HDR_LEN + aapHdr.len));
            });
            this.conn.on("error", (err) => {
                reject(new Error(err.message));
            });
            this.conn.write(hashBuf);
        });
    }
    hashData(hash, data) {
        return new Promise((resolve, reject) => {
            if (data.length > constants.MAX_HASH_OP_SEG) {
                reject(new exceptions.HsmError(`The maximum data length per time must be ${constants.MAX_HASH_OP_SEG} bytes`));
                return;
            }
            const payloadLen = constants.SIZE_OF_UINT_16 * 2 + data.length;
            const hashBuf = utils_1.Aap.create(constants.MOD_CORE_HASH_CONT, payloadLen, constants.AAP_HDR_LEN + payloadLen);
            let offset = constants.AAP_HDR_LEN;
            hashBuf.fill(hash, offset, offset + constants.SIZE_OF_UINT_16);
            offset += constants.SIZE_OF_UINT_16;
            hashBuf.writeUint16LE(data.length, offset);
            offset += constants.SIZE_OF_UINT_16;
            hashBuf.fill(data, offset, offset + data.length);
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error on hash data", aapHdr.len));
                    return;
                }
                utils_1.Logger.info("Hash data successfully");
                resolve(true);
            });
            this.conn.once("error", (err) => {
                reject(err);
                return;
            });
            this.conn.write(hashBuf);
        });
    }
    get(hash) {
        return new Promise((resolve, reject) => {
            // c: MOD_CORE_HASH_END      --> s
            // s: NOTIFY_OK/NOTIFY_ERR   --> c ; Payload == HashValue
            //
            // MOD_CORE_HASH_END       --> PROTOCOL_NOTIFICATION
            // id                      --> MOD_CORE_HASH_END
            // len                     --> len(PAYLOAD)
            // PAYLOAD                 --> TICKET
            // TICKET                  --> uint16_t
            const payloadLen = constants.SIZE_OF_UINT_16;
            const hashBuf = utils_1.Aap.create(constants.MOD_CORE_HASH_END, payloadLen, constants.AAP_HDR_LEN + payloadLen);
            // hashBuf.fill(hash, constants.AAP_HDR_LEN);
            hashBuf.writeUint16LE(hash.readUInt16LE(0), constants.AAP_HDR_LEN);
            utils_1.Logger.info(">>>>Hash: " + hashBuf.toString("hex"));
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error on fish hash", aapHdr.len));
                    return;
                }
                utils_1.Logger.info("Hash data successfully");
                resolve(data.subarray(constants.AAP_HDR_LEN, constants.AAP_HDR_LEN + aapHdr.len));
            });
            this.conn.once("error", (err) => {
                reject(err);
            });
            this.conn.write(hashBuf);
        });
    }
}
exports.default = Hash;
