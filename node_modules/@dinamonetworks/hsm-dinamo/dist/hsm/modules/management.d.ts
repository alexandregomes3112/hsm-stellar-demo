import HsmBaseModule from "./hsm_base_module";
import * as interfaces from "../interfaces";
import * as enums from "../enums";
import { AclList, ErrorResponseNH, genSVMKResponse, GetShadowResponse, ObjectInfo, ScInfo, ScLabel, SucessResponse, SucessResponseNH } from "../types";
import tls from "tls";
export default class Management extends HsmBaseModule implements interfaces.management.Management {
    private nh;
    private cryptography;
    private static readonly MESSAGE_LENGTH_SIZE;
    private executablePath;
    constructor(conn: tls.TLSSocket);
    private getWindowsExecutablePath;
    setNsAuthState(aclMask: enums.ACL_MASK, state: enums.NSAUTH_STATE, share: string[]): Promise<boolean>;
    listObjs(): Promise<string[]>;
    generateSVMK(m: number, n: number, secret?: string | null, version?: enums.SVMK_VERSION): Promise<genSVMKResponse>;
    recoverSVMK(parts: string[]): Promise<string>;
    private validateSecret;
    private handleResponseSVMK;
    private isSVMK2;
    private mOfnSplit2;
    private mOfnRecover2;
    private mOfnValidate;
    private numberOfParts;
    private bufToMOfNSplit2;
    getShadow(pin: string, path?: string): Promise<GetShadowResponse>;
    getScInfo(path?: string): Promise<ScInfo | ErrorResponseNH>;
    getScLabel(pin: string, path?: string): Promise<ScLabel | ErrorResponseNH>;
    setScLabel(pin: string, label: string, path?: string): Promise<SucessResponseNH | ErrorResponseNH>;
    changeScPin(oldPin: string, newPin: string, path?: string): Promise<SucessResponseNH | ErrorResponseNH>;
    writeScSVMK(pin: string, shadow: string, overwrite: boolean, path?: string): Promise<SucessResponseNH | ErrorResponseNH>;
    eraseSmartCard(pin: string, path?: string): Promise<SucessResponseNH | ErrorResponseNH>;
    setTlsBundle(key?: string, cert?: string): Promise<SucessResponse>;
    private validatePin;
    private validateSVMK;
    private validateParts;
    private executeNativeHostCommand;
    private validateLabel;
    setUserParam(user: string, der: Buffer): Promise<SucessResponse>;
    deleteAuthSA(user: string, tfaType: enums.TFA_TYPE): Promise<SucessResponse>;
    getUserAcl(user: string): Promise<AclList>;
    setUserAcl(user: string, acl: number[]): Promise<SucessResponse>;
    listBlobs(): Promise<string[]>;
    getObjectInfo(objId: string): Promise<ObjectInfo>;
    getObjectInfoModprobe(objId: string): Promise<ObjectInfo>;
    private objectInfo;
    private parseObjectInfo;
    private getType;
    private getPermissions;
    private getAttributes;
}
