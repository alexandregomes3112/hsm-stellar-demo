"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const hsm_base_module_1 = __importDefault(require("./hsm_base_module"));
const enums = __importStar(require("../enums"));
const utils_1 = require("../../utils");
const constants = __importStar(require("../constants"));
const exceptions = __importStar(require("../exceptions"));
const utils_2 = require("../../utils");
class Ocra extends hsm_base_module_1.default {
    constructor(conn) {
        super(conn);
    }
    ocraGen(sk, q, suite, len, c, ph, s, ts) {
        return new Promise((resolve, reject) => {
            try {
                this.keyNameValidate(sk);
                this.ocraLenValidate(len);
                if (s) {
                    this.sessionValidate(s);
                }
                const ocraModeLenMaxSuite = enums.OCRA_MODE_LEN.MOD_OATH_OCRA_MAX_SUITE_LEN + 1;
                const ocraModeLemMaxCsess = enums.OCRA_MODE_LEN.MOD_OATH_OCRA_CSESS_MAX_LEN + 1;
                const payloadLen = constants.SIZE_OF_UINT_32 +
                    constants.SIZE_OF_UINT_8 +
                    constants.MAX_OBJ_FQN_LEN +
                    ocraModeLenMaxSuite +
                    enums.OCRA_MODE_LEN.MOD_OATH_OCRA_CTR_LEN +
                    enums.OCRA_MODE_LEN.MOD_OATH_OCRA_MAX_Q_LEN +
                    constants.MAX_HASH_LEN +
                    ocraModeLemMaxCsess +
                    enums.OCRA_MODE_LEN.MOD_OATH_OCRA_TIME_STEPS_LEN;
                const ocraBuf = utils_1.Aap.create(constants.MOD_OATH_OCRA_GEN, payloadLen, constants.AAP_HDR_LEN + payloadLen);
                let offset = constants.AAP_HDR_LEN;
                let setup = 0;
                if (c !== undefined || c !== null) {
                    setup |= enums.OCRA_MODE.MOD_OATH_OCRA_USE_CTR;
                }
                if (ph !== undefined || ph !== null) {
                    if (ph?.length === enums.OCRA_PIN_HASH_TYPE.MOD_OATH_OCRA_USE_PH20) {
                        setup |= enums.OCRA_PIN_HASH_TYPE.MOD_OATH_OCRA_USE_PH20;
                    }
                    if (ph?.length === enums.OCRA_PIN_HASH_TYPE.MOD_OATH_OCRA_USE_PH32) {
                        setup |= enums.OCRA_PIN_HASH_TYPE.MOD_OATH_OCRA_USE_PH32;
                    }
                    if (ph?.length === enums.OCRA_PIN_HASH_TYPE.MOD_OATH_OCRA_USE_PH64) {
                        setup |= enums.OCRA_PIN_HASH_TYPE.MOD_OATH_OCRA_USE_PH64;
                    }
                }
                if (ts !== undefined || ts !== null) {
                    setup |= enums.OCRA_MODE.MOD_OATH_OCRA_USE_TS;
                }
                ocraBuf.writeUInt32LE(setup, offset);
                offset += constants.SIZE_OF_UINT_32;
                len
                    ? this.ocraLenValidate(len)
                    : (len = enums.MOD_OATH_OTP.MOD_OATH_MIN_OTP_LEN);
                ocraBuf.writeUInt8(len, offset);
                offset += constants.SIZE_OF_UINT_8;
                ocraBuf.write(sk, offset, sk.length);
                offset += constants.MAX_OBJ_FQN_LEN;
                if (suite) {
                    ocraBuf.fill(suite, offset, offset + suite.length);
                }
                offset += ocraModeLenMaxSuite;
                if (c) {
                    ocraBuf.writeBigUInt64BE(c, offset);
                }
                offset += enums.OCRA_MODE_LEN.MOD_OATH_OCRA_CTR_LEN;
                if (q) {
                    ocraBuf.fill(q, offset, offset + q.length);
                }
                offset += enums.OCRA_MODE_LEN.MOD_OATH_OCRA_MAX_Q_LEN;
                if (ph) {
                    ocraBuf.fill(ph, offset, offset + enums.HASH_LEN.MAX_HASH_LEN);
                }
                offset += enums.HASH_LEN.MAX_HASH_LEN;
                if (s) {
                    ocraBuf.fill(s, offset, offset + s.length);
                }
                offset += ocraModeLemMaxCsess;
                if (ts) {
                    ocraBuf.writeBigUInt64BE(ts, offset);
                }
                offset += enums.OCRA_MODE_LEN.MOD_OATH_OCRA_TIME_STEPS_LEN;
                this.conn.once("data", (data) => {
                    const aapHdr = utils_1.Aap.read(data);
                    if (utils_1.Aap.hasError(aapHdr)) {
                        reject(new exceptions.HsmError("Error on generate Ocra", aapHdr.len));
                        return;
                    }
                    utils_2.Logger.info("Ocra generated successfully");
                    resolve(data
                        .subarray(constants.AAP_HDR_LEN, constants.AAP_HDR_LEN + (len ? len : 6))
                        .toString("ascii"));
                });
                this.conn.once("error", (err) => {
                    reject(new Error(err.message));
                });
                this.conn.write(ocraBuf);
            }
            catch (error) {
                reject(error);
                return;
            }
        });
    }
    ocraLenValidate(ocraLen) {
        if (ocraLen < enums.MOD_OATH_OTP.MOD_OATH_MIN_OTP_LEN || ocraLen > 8) {
            return new exceptions.InvalidParameterError(`OCRA length must be between ${enums.MOD_OATH_OTP.MOD_OATH_MIN_OTP_LEN} and 8`);
        }
    }
    keyNameValidate(str) {
        if (str.length > 0 && str.length < constants.MAX_OBJ_ID) {
            return new exceptions.InvalidParameterError(`Keyname must have a maximum length of 32 bytes`);
        }
        const isAscii = this.isAsciiEncode(str);
        if (!isAscii) {
            return new exceptions.InvalidParameterError(`Keyname must contain only ASCII characters`);
        }
    }
    sessionValidate(str) {
        const isAscii = this.isAsciiEncode(str);
        if (!isAscii) {
            return new exceptions.InvalidParameterError(`Session must contain only ASCII characters`);
        }
        if (Buffer.byteLength(str, "ascii") > 512) {
            return new exceptions.InvalidParameterError(`Session must be less than 512 bytes`);
        }
    }
    isAsciiEncode(text) {
        for (let i = 0; i < text.length; i++) {
            const charCode = text.charCodeAt(i);
            if (charCode > 127) {
                return false;
            }
        }
        return true;
    }
}
exports.default = Ocra;
