import tls from "tls";
import * as interfaces from "../interfaces";
import * as enums from "../enums";
import HsmBaseModule from "./hsm_base_module";
export default class Key extends HsmBaseModule implements interfaces.key.Key {
    constructor(conn: tls.TLSSocket);
    create(name: string, algorithm: enums.SYMMETRICAL_KEYS | enums.RSA_ASYMMETRIC_KEYS | enums.ECC_ASYMMETRIC_SWITCHES | enums.ECX_ASYMMETRIC_SWITCHES | enums.HMAC_KEYS | enums.ECC_ASYMMETRIC_PBC_SWITCHES, exportable?: boolean, temporary?: boolean, blockchain?: boolean): Promise<boolean>;
    delete(name: string): Promise<boolean>;
    block(name: string): Promise<boolean>;
    unblock(name: string): Promise<boolean>;
    importCertificate(name: string, certData: Buffer): Promise<boolean>;
    generatePKCS10(keyName: string, dn: interfaces.key.X500DistinguishedName, hashAlgorith?: enums.PKCS10_HASH_ALGORITHM): Promise<Buffer>;
    exportAsymmetricPub(name: string, x509?: boolean): Promise<Buffer>;
    exportAsymmetricPriv(name: string): Promise<Buffer>;
    exportSymmetric(name: string): Promise<Buffer>;
    exportCertClearText(name: string): Promise<Buffer>;
    importKekWrap(mode: enums.KEK_MODE | enums.KEK_WRAP_MODE, pad: enums.KEK_WRAP_PADDING, name: string, kekKeyName: string, objType: enums.SYMMETRICAL_KEYS | enums.RSA_ASYMMETRIC_KEYS | enums.ECC_ASYMMETRIC_SWITCHES | enums.ECX_ASYMMETRIC_SWITCHES, data: Buffer, iv?: string, exportable?: boolean, temporary?: boolean, blockchain?: boolean): Promise<boolean>;
    exportKekWrap(mode: enums.KEK_MODE | enums.KEK_WRAP_MODE, pad: enums.KEK_WRAP_PADDING, name: string, kekKeyName: string, iv?: string): Promise<Buffer>;
    exportPKCS8(name: string, password: string): Promise<Buffer>;
    importPKCS8(name: string, keyType: enums.RSA_ASYMMETRIC_KEYS | enums.ECC_ASYMMETRIC_SWITCHES, password: string, p8: string, exportable?: boolean, temporary?: boolean, blockchain?: boolean): Promise<boolean>;
    import(name: string, keyType: enums.SYMMETRICAL_KEYS | enums.RSA_ASYMMETRIC_KEYS | enums.HMAC_KEYS | enums.ECC_ASYMMETRIC_PBC_SWITCHES, data: Buffer, exportable?: boolean, temporary?: boolean, blockchain?: boolean): Promise<boolean>;
    private importBlob;
    private x500DistinguishedNameToBuffer;
    private objectExport;
    private kekWrapOp;
    importPKCS12(keyName: string, certName: string, password: string, p12: Buffer, pubKey?: string, exportable?: boolean, temporary?: boolean): Promise<boolean>;
}
