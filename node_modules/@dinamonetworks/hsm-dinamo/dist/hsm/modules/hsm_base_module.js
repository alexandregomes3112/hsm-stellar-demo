"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const constants = __importStar(require("../constants"));
const utils_1 = require("../../utils");
const exceptions = __importStar(require("../exceptions"));
/**
 * @internal
 * Classe base para os mÃ³dulos do HSM
 */
class HsmBaseModule {
    constructor(conn) {
        this.conn = conn;
    }
    /**
     * @internal
     * Deleta um objeto no HSM
     * @param {string} objName Nome do objeto a ser deletado
     * @returns {Promise<boolean>} Retorna true se o objeto foi deletado com sucesso
     * @throws {HsmError} Se ocorrer um erro ao deletar o objeto
     */
    deleteObject(objName) {
        return new Promise((resolve, reject) => {
            const payloadLen = constants.MAX_OBJ_FQN_LEN;
            const payload = utils_1.Aap.create(constants.MOD_CORE_DEL_OBJ, payloadLen, constants.AAP_HDR_LEN + payloadLen);
            payload.write(objName, constants.AAP_HDR_LEN);
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError("Error on delete object", aapHdr.len));
                    return;
                }
                utils_1.Logger.info("Object deleted successfully");
                resolve(true);
            });
            this.conn.once("error", (err) => {
                reject(new exceptions.HsmError(err.message));
            });
            this.conn.write(payload);
        });
    }
    /**
     * @internal
     * Bloqueia ou desbloqueia um objeto no HSM
     * @param {string} objName Nome do objeto a ser bloqueado ou desbloqueado
     * @param {number} status Status do objeto. {@link constants.MSBO_OP_UNBLOCK} para desbloquear, {@link constants.MSBO_OP_BLOCK} para bloquear
     */
    blockUnblockObject(objName, status) {
        return new Promise((resolve, reject) => {
            const statusStr = status === constants.MSBO_OP_BLOCK ? "block" : "unblock";
            const payloadLen = constants.MAX_OBJ_FQN_LEN + constants.SIZE_OF_UINT_8;
            const objBuffer = utils_1.Aap.create(constants.MOD_STAT_BLOCK_OBJ, payloadLen, constants.AAP_HDR_LEN + payloadLen);
            let offset = constants.AAP_HDR_LEN;
            objBuffer.write(objName, offset);
            offset += constants.MAX_OBJ_FQN_LEN;
            objBuffer.writeUInt8(status, offset);
            this.conn.once("data", (data) => {
                const aapHdr = utils_1.Aap.read(data);
                if (utils_1.Aap.hasError(aapHdr)) {
                    reject(new exceptions.HsmError(`Error on ${statusStr} object`, aapHdr.len));
                }
                utils_1.Logger.info(`Object ${statusStr}ed successfully`);
                resolve(true);
            });
            this.conn.once("error", (err) => {
                reject(new exceptions.HsmError(err.message));
            });
            this.conn.write(objBuffer);
        });
    }
}
exports.default = HsmBaseModule;
