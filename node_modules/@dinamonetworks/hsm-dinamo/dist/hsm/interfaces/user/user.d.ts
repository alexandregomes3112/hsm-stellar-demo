import * as enums from "../../enums";
export default interface User {
    /**
     * Cria um usuário no HSM.
     * @param {string} userId Identificador do usuário no HSM. Tamanho máximo de {@link constants.MAX_USR_LEN}.
     * @param {string} password Senha do usuário no HSM. Tamanho máximo de {@link constants.MAX_USR_PWD_LEN}.
     * @param {Array<enums.USER_PERMISSIONS>} permissions Permissões do usuário no HSM. Default: {@link enums.USER_PERMISSIONS.NOP}.
     * @returns {Promise<boolean>} Retorna true se o usuário foi criado com sucesso.
     * @throws {HsmError} Lança exceção caso ocorra algum erro ao criar o usuário.
     * @throws {InvalidParameterError} Lança exceção caso o userId ou password sejam inválidos.
     * @see Código de exemplo: [Criando um usuário](<../../../../pages/Criando um usuário.md>)
     */
    create(userId: string, password: string, permissions?: Array<enums.USER_PERMISSIONS>): Promise<boolean>;
    /**
     * Remove um usuário do HSM.
     * @param {string} userId Identificador do usuário no HSM. Tamanho máximo de {@link constants.MAX_USR_LEN}.
     * @returns {Promise<boolean>} Retorna true se o usuário foi removido com sucesso.
     * @throws {HsmError} Lança exceção caso ocorra algum erro ao remover o usuário.
     * @throws {InvalidParameterError} Lança exceção caso o userId seja inválido.
     * @see Código de exemplo: [Removendo um usuário](<../../../../pages/Removendo um usuário.md>)
     */
    remove(userId: string): Promise<boolean>;
    /**
     * Bloqueia um usuário no HSM.
     * @param {string} userId Identificador do usuário no HSM. Tamanho máximo de {@link constants.MAX_USR_LEN}.
     * @see Código de exemplo: [Bloqueando um usuário](<../../../../pages/Bloqueando um usuário.md>)
     */
    block(userId: string): Promise<boolean>;
    /**
     * Desbloqueia um usuário no HSM.
     * @param {string} userId Identificador do usuário no HSM. Tamanho máximo de {@link constants.MAX_USR_LEN}.
     * @see Código de exemplo: [Desbloqueando um usuário](<../../../../pages/Desbloqueando um usuário.md>)
     */
    unblock(userId: string): Promise<boolean>;
    /**
     * Altera a senha do usuário autenticado.
     * @param {string} newPassword Nova senha do usuário no HSM. Tamanho deve ser entre {@link constants.MIN_USR_PWD_LEN} e {@link constants.MAX_USR_PWD_LEN}.
     * @returns {Promise<boolean>} Retorna true se a senha foi alterada com sucesso.
     * @throws {HsmError} Lança exceção caso ocorra algum erro ao alterar a senha.
     * @throws {InvalidParameterError} Lança exceção caso a nova senha seja inválida.
     * @see Código de exemplo: [Alterando a senha de acesso](<../../../../pages/Alterando a senha de acesso.md>)
     */
    changePassword(newPassword: string): Promise<boolean>;
    /**
     * Lista os tokens do usuário atenticado.
     * @returns {Promise<Array<string>>} Retorna um array com os tokens do usuário.
     * @throws {HsmError} Lança exceção caso ocorra algum erro ao listar os tokens.
     * @throws {InvalidParameterError} Lança exceção caso o token seja inválido.
     * @see Código de exemplo: [Listando tokens de acesso](<../../../../pages/Listando tokens de acesso.md>)
     */
    listTokens(): Promise<Array<string>>;
    /**
     * Gera um token para o usuário autenticado.
     * @param {Date} expiration Data de expiração do token. Default: Sem expiração.
     * @returns {Promise<string>} Retorna o token gerado.
     * @throws {HsmError} Lança exceção caso ocorra algum erro ao gerar o token.
     * @throws {InvalidParameterError} Lança exceção caso a data de expiração seja inválida.
     * @see Código de exemplo: [Gerando um token de acesso](<../../../../pages/Gerando um token de acesso.md>)
     */
    generateToken(expiration?: Date): Promise<string>;
    /**
     * Revoga um token do usuário autenticado.
     * @param {string} token Token a ser revogado. O token gerado pelo método {@link generateToken} ou retornado pelo método {@link listTokens}.
     * @returns {Promise<boolean>} Retorna true se o token foi revogado com sucesso.
     * @throws {HsmError} Lança exceção caso ocorra algum erro ao revogar o token.
     * @throws {InvalidParameterError} Lança exceção caso o token seja inválido.
     * @see Código de exemplo: [Revogando um token de acesso](<../../../../pages/Revogando um token de acesso.md>)
     */
    revokeToken(token: string): Promise<boolean>;
}
