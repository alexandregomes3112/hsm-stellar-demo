/**
 * @internal
 */
interface BaseOptions {
    data: string | Buffer | Array<unknown>;
    reject: (reason?: unknown) => void;
    attribute?: string;
    message?: string;
    required?: boolean;
}
/**
 * @internal
 * Opções para validação de tamanho máximo.
 * @property {string | Buffer | Array<unknown>} data Dado que será verificado o tamanho. Pode ser string, buffer ou array.
 * @property {number} length Tamanho que deve ser o dado.
 * @property {(reason?: unknown) => void} reject Função de rejeição da promise.
 * @property {string} attribute Nome do atributo que será retornado na mensagem de erro.
 * @property {string} message Mensagem de erro que será retornada caso o tamanho seja maior que o máximo.
 * @property {boolean} required Se o dado é obrigatório.
 * @default message = 'The [attribute] must be equal to [length].' if attribute is defined, otherwise 'The data must be equal to [length].'
 */
export interface LengthOptions extends BaseOptions {
    length: number;
}
/**
 * @internal
 * Opções para validação de tamanho máximo.
 * @property {string | Buffer | Array<unknown>} data Dado que será verificado o tamanho. Pode ser string, buffer ou array.
 * @property {number} max Tamanho máximo permitido.
 * @property {(reason?: unknown) => void} reject Função de rejeição da promise.
 * @property {string} attribute Nome do atributo que será retornado na mensagem de erro.
 * @property {string} message Mensagem de erro que será retornada caso o tamanho seja maior que o máximo.
 * @property {boolean} required Se o dado é obrigatório.
 * @default message = 'The [attribute] must be less than or equal to [max].' if attribute is defined, otherwise 'The data must be less than or equal to [max].'
 */
export interface MaxLengthOptions extends BaseOptions {
    max: number;
}
/**
 * @internal
 * Opções para validação de tamanho mínimo.
 * @property {string | Buffer | Array<unknown>} data Dado que será verificado o tamanho. Pode ser string, buffer ou array.
 * @property {number} min Tamanho mínimo permitido.
 * @property {(reason?: unknown) => void} reject Função de rejeição da promise.
 * @property {string} attribute Nome do atributo que será retornado na mensagem de erro.
 * @property {string} message Mensagem de erro que será retornada caso o tamanho seja maior que o mínimo.
 * @property {boolean} required Se o dado é obrigatório.
 * @default message = 'The [attribute] must be greater than or equal to [min].' if attribute is defined, otherwise 'The data must be greater than or equal to [min].'
 */
export interface MinLengthOptions extends BaseOptions {
    min: number;
}
/**
 * @internal
 * Opções para validação de tamanho mínimo.
 * @property {string | Buffer | Array<unknown>} data Dado que será verificado o tamanho. Pode ser string, buffer ou array.
 * @property {number} min Tamanho mínimo permitido.
 * @property {number} max Tamanho máximo permitido.
 * @property {(reason?: unknown) => void} reject Função de rejeição da promise.
 * @property {string} attribute Nome do atributo que será retornado na mensagem de erro.
 * @property {string} message Mensagem de erro que será retornada caso o tamanho seja maior que o mínimo.
 * @property {boolean} required Se o dado é obrigatório.
 * @default message = "The [attribute] must be between [min] and [max]." if attribute is defined, otherwise "The data must be between [min] and [max]."
 */
export interface BetweenLengthOptions extends BaseOptions, MaxLengthOptions, MinLengthOptions {
}
/**
 * @internal
 * Opções para validação de tamanho mínimo.
 * @property {string} data Dado que será verificado se é um base64 válido.
 * @property {(reason?: unknown) => void} reject Função de rejeição da promise.
 * @property {string} attribute Nome do atributo que será retornado na mensagem de erro.
 * @property {string} message Mensagem de erro que será retornada caso o tamanho seja maior que o mínimo.
 * @property {boolean} required Se o dado é obrigatório.
 * @default message = "The [attribute] must be a valid base64 string." if attribute is defined, otherwise "The data must be a valid base64 string."
 */
export interface Base64Options extends BaseOptions {
}
export {};
