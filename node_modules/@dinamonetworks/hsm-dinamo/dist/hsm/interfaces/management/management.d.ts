import { NSAUTH_STATE, ACL_MASK, SVMK_VERSION } from "../../enums";
import { AclList, ErrorResponseNH, genSVMKResponse, GetShadowResponse, ObjectInfo, ScInfo, ScLabel, SucessResponse, SucessResponseNH } from "../../types";
import { enums } from "../../index";
export default interface Management {
    /**
     * Lê a shadow de um cartão Smart-card M de N Dinamo.
     * @param {string} pin - PIN do cartão. Deve ser uma string numérica ASCII com tamanho máximo de 8.
     * @param {string} path - Atributo opcional com o path para o utilitário dinamonh.exe.
     * @returns {Promise<string>} - Dados da shadow lida.
     * @throws {@link exceptions.HsmError} Caso ocorra algum erro na operação.
     * @remarks
     * <span style="color: orange; font-weight: bold;">**OBS**: Para realizar esta operação, é necessário instalar o HSM Client na opção Completa no dispositivo. Você pode fazer o download do <a href="https://docs.dinamonetworks.io/hsm/soft_client/downloads/" style="color: ciano; font-weight: bold; text-decoration: underline;">HSM Client</a> através do link. Além disso, é necessário utilizar uma leitora de smartcards certificada pela Dinamo Networks.</span>
     *
     * <span style="color: orange; font-weight: bold;">**OBS**:Embora seja possível indicar o path do Dinamo Native Host manualmente por meio do atributo path, a Dinamo Networks recomenda seu uso apenas em casos de restrição severa ao registro do Windows ou alterações no método default de instalação do cliente Dinamo</span>
     *
     * @see Código de exemplo: [Recuperando a shadow de um smartcard](<../../../../pages/Recuperando a shadow de um smartcard.md>)
     */
    getShadow(pin: string, path?: string): Promise<GetShadowResponse>;
    /**
     * Configura o estado de autenticação do sistema NS (Network Security).
     * @param {ACL_MASK} aclMask - Máscara de controle de acesso ({@link ACL_MASK}). Pode ser uma combinação de valores permitidos (ex.: {@link ACL_MASK.OBJ_READ} | {@link ACL_MASK.USR_CREATE} | {@link ACL_MASK.SYS_OPERATOR}) usando operações bitwise.
     * @param {NSAUTH_STATE} state - Estado de autenticação NS (STATE). Deve ser um dos valores do enum {@link NSAUTH_STATE}.
     * @param {string[]} share - Array de strings hexadecimais representando os shares M of N. Cada share deve ser uma string hexadecimal.
     * @returns {Promise<boolean>} - Resolve se a configuração for bem-sucedida.
     * @throws {@link exceptions.HsmError} Caso ocorra algum erro na operação ou se algum parâmetro for inválido.
     * @see Código de exemplo: [Mudando o estado de uma partição M de N](<../../../../pages/Mudando o estado de uma partição M de N.md>)
     * @see Código de exemplo: [Recuperando shadows e alterando o estado de uma partição](<../../../../pages/Recuperando shadows e alterando o estado de uma partição.md>)
     */
    setNsAuthState(aclMask: ACL_MASK, state: NSAUTH_STATE, share: string[]): Promise<boolean>;
    /**
     * Gera um Segredo e o divide em partes usando o esquema de compartilhamento secreto de Shamir.
     *
     * @param {number} m - Número mínimo de partes necessárias para reconstruir o segredo.  Deve ser maior ou igual a 2 e menor ou igual a n.
     * @param {number} n - Número total de partes geradas. Deve ser maior ou igual a m e menor ou igual a 255.
     * @param {string | null} secret - Segredo a ser dividido. Se nulo ou não fornecido, um segredo aleatório será gerado. Se fornecido, deve ser uma string ASCII com tamanho fixo dependendo da versão do SVMK.
     * @param {SVMK_VERSION} version - Versão do SVMK que determina o tamanho do segredo. (Opcional. Valor padrão é 2)
     * @returns {Promise<genSVMKResponse>} - Um objeto contendo o segredo original (se fornecido ou gerado), a entropia usada (se o segredo foi gerado), os parâmetros m e n, e as partes geradas pelo esquema de Shamir.
     * @throws {@link exceptions.HsmError} Se ocorrer um erro durante a operação, como parâmetros inválidos ou erro de comunicação com o HSM.
     *
     * @remarks
     * O esquema de Shamir permite dividir um segredo em `n` partes, de forma que pelo menos `m` partes sejam necessárias para reconstruir o segredo original. Nenhuma combinação de `m-1` partes revela qualquer informação sobre o segredo.
     *
     * A versão do SVMK define o tamanho do segredo e o formato das partes. A versão 2 introduz melhorias de segurança em relação à versão 1.
     *
     * Se `secret` for nulo, um novo segredo aleatório com o tamanho apropriado (determinado pela versão) será gerado. A entropia usada para gerar o segredo será incluída na resposta.
     *
     * Se `secret` for fornecido, ele será usado como o segredo a ser dividido. Certifique-se de que o segredo tenha o tamanho correto para a versão especificada.
     * @see Código de exemplo: [Gerando uma Server Master Key e Dividindo em partes com Shamir](<../../../../pages/Gerando uma Server Master Key e Dividindo em partes com Shamir.md>)
     */
    generateSVMK(m: number, n: number, secret: string | null, version?: SVMK_VERSION): Promise<genSVMKResponse>;
    /**
     * Recupera o SVMK (SVMK - Server Master Key) a partir de um conjunto de partes geradas pelo esquema de compartilhamento secreto de Shamir.
     *
     * @param {string[]} parts - Array de strings hexadecimais representando as partes do SVMK.  Deve conter pelo menos `m` partes válidas, onde `m` é o número mínimo de partes definido durante a geração do SVMK.
     * @returns {Promise<string>} - O segredo original reconstruído, como uma string hexadecimal.
     * @throws {@link exceptions.HsmError} Se ocorrer um erro durante a operação, como partes inválidas, número insuficiente de partes ou erro de comunicação com o HSM.
     *
     * @remarks
     * Este método recupera o SVMK original a partir das partes fornecidas.  As partes devem ter sido geradas previamente pelo método `generateSVMK`.  O número de partes fornecidas deve ser igual ou superior ao valor de `m` definido na geração.  A ordem das partes não importa.
     *
     * Se as partes fornecidas forem inválidas (formato incorreto, tamanhos diferentes, etc.) ou se o número de partes for insuficiente, um erro será lançado.
     * @see Código de exemplo: [Recuperando uma Server Master Key dividida em partes com Shamir](<../../../../pages/Recuperando uma Server Master Key dividida em partes com Shamir.md>)
     */
    recoverSVMK(parts: string[]): Promise<string>;
    /**
     * Obtém informações sobre o smart card.
     *
     * Este método se obtem informações detalhadas sobre o smart card inserido na leitora.
     * @param {string} path - Atributo opcional com o path para o utilitário dinamonh.exe.
     *
     * @returns {Promise<ScInfo | ErrorResponseNH>} Uma Promise que resolve com um objeto `ScInfo` contendo as informações do smart card em caso de sucesso, ou rejeita com um objeto `ErrorResponseNH` em caso de erro.
     *
     * @throws {HsmError} Se ocorrer um erro durante a comunicação com o Native Host, como:
     *   - Executável do Native Host não encontrado.
     *   - Erro ao iniciar o processo do Native Host.
     *   - Erro ao analisar a resposta JSON do Native Host.
     *   - Timeout na operação.
     *   - Native Host encerrado com código de erro.
     *
     * @remarks
     * <span style="color: orange; font-weight: bold;">**OBS**: Para realizar esta operação, é necessário instalar o HSM Client na opção Completa no dispositivo. Você pode fazer o download do <a href="https://docs.dinamonetworks.io/hsm/soft_client/downloads/" style="color: ciano; font-weight: bold; text-decoration: underline;">HSM Client</a> através do link. Além disso, é necessário utilizar uma leitora de smartcards certificada pela Dinamo Networks.</span>
     *
     * <span style="color: orange; font-weight: bold;">**OBS**:Embora seja possível indicar o path do Dinamo Native Host manualmente por meio do atributo path, a Dinamo Networks recomenda seu uso apenas em casos de restrição severa ao registro do Windows ou alterações no método default de instalação do cliente Dinamo</span>
     *
     * As informações do smart card são retornadas em um objeto `ScInfo`, que contém detalhes como ATR, CSN, versão do chip, etc.
     * Em caso de erro, um objeto `ErrorResponseNH` é retornado, contendo o status e o código de erro.
     *
     * @see Código de exemplo: [Recuperando informações de um smartcard](<../../../../pages/Recuperando informações de um smartcard.md>)
     */
    getScInfo(path?: string): Promise<ScInfo | ErrorResponseNH>;
    /**
     * Obtém o label do smart card.
     *
     * @param {string} pin - O PIN do smart card.
     * @param {string} path - Atributo opcional com o path para o utilitário dinamonh.exe.
     * @returns {Promise<ScLabel | ErrorResponseNH>} Uma Promise que resolve com um objeto `ScLabel` contendo o label do smart card em caso de sucesso, ou rejeita com um objeto `ErrorResponseNH` em caso de erro.
     *
     * @throws {HsmError} Se ocorrer um erro.
     *
     * @remarks
     * O label do smart card é retornado em um objeto `ScLabel`. Em caso de erro, um objeto `ErrorResponseNH` é retornado, contendo o status e o código de erro.
     *
     * <span style="color: orange; font-weight: bold;">**OBS**: Para realizar esta operação, é necessário instalar o HSM Client na opção Completa no dispositivo. Você pode fazer o download do <a href="https://docs.dinamonetworks.io/hsm/soft_client/downloads/" style="color: ciano; font-weight: bold; text-decoration: underline;">HSM Client</a> através do link. Além disso, é necessário utilizar uma leitora de smartcards certificada pela Dinamo Networks.</span>
     *
     * <span style="color: orange; font-weight: bold;">**OBS**:Embora seja possível indicar o path do Dinamo Native Host manualmente por meio do atributo path, a Dinamo Networks recomenda seu uso apenas em casos de restrição severa ao registro do Windows ou alterações no método default de instalação do cliente Dinamo</span>
     *
     * @see Código de exemplo: [Recuperando o label de um smartcard](<../../../../pages/Recuperando o label de um smartcard.md>)
     */
    getScLabel(pin: string, path?: string): Promise<ScLabel | ErrorResponseNH>;
    /**
     * Define o label do smart card.
     *
     * @param {string} pin - O PIN do smart card.
     * @param {string} label - O novo label a ser definido.
     * @param {string} path - Atributo opcional com o path para o utilitário dinamonh.exe.
     * @returns {Promise<SucessResponseNH | ErrorResponseNH>} Uma Promise que resolve com um objeto `SucessResponseNH` em caso de sucesso, ou rejeita com um objeto `ErrorResponseNH` em caso de erro.
     *
     * @throws {HsmError} Se ocorrer um erro.
     *
     * @remarks
     * <span style="color: orange; font-weight: bold;">**OBS**: Para realizar esta operação, é necessário instalar o HSM Client na opção Completa no dispositivo. Você pode fazer o download do <a href="https://docs.dinamonetworks.io/hsm/soft_client/downloads/" style="color: ciano; font-weight: bold; text-decoration: underline;">HSM Client</a> através do link. Além disso, é necessário utilizar uma leitora de smartcards certificada pela Dinamo Networks.</span>
     *
     * <span style="color: orange; font-weight: bold;">**OBS**:Embora seja possível indicar o path do Dinamo Native Host manualmente por meio do atributo path, a Dinamo Networks recomenda seu uso apenas em casos de restrição severa ao registro do Windows ou alterações no método default de instalação do cliente Dinamo</span>
     */
    setScLabel(pin: string, label: string, path?: string): Promise<SucessResponseNH | ErrorResponseNH>;
    /**
     * Altera o PIN do smart card.
     *
     * @param {string} oldPin - O PIN atual do smart card.
     * @param {string} newPin - O novo PIN a ser definido.
     * @param {string} path - Atributo opcional com o path para o utilitário dinamonh.exe.
     * @returns {Promise<SucessResponseNH | ErrorResponseNH>} Uma Promise que resolve com um objeto `SucessResponseNH` em caso de sucesso, ou rejeita com um objeto `ErrorResponseNH` em caso de erro.
     *
     * @throws {HsmError} Se ocorrer um erro.
     *
     * @remarks
     * <span style="color: orange; font-weight: bold;">**OBS**: Para realizar esta operação, é necessário instalar o HSM Client na opção Completa no dispositivo. Você pode fazer o download do <a href="https://docs.dinamonetworks.io/hsm/soft_client/downloads/" style="color: ciano; font-weight: bold; text-decoration: underline;">HSM Client</a> através do link. Além disso, é necessário utilizar uma leitora de smartcards certificada pela Dinamo Networks.</span>
     *
     * <span style="color: orange; font-weight: bold;">**OBS**:Embora seja possível indicar o path do Dinamo Native Host manualmente por meio do atributo path, a Dinamo Networks recomenda seu uso apenas em casos de restrição severa ao registro do Windows ou alterações no método default de instalação do cliente Dinamo</span>
     */
    changeScPin(oldPin: string, newPin: string, path?: string): Promise<SucessResponseNH | ErrorResponseNH>;
    /**
     * Grava o SVMK (Server Master Key) no smart card.
     *
     * @param {string} pin - O PIN do smart card. Deve ser uma string numérica com exatamente 8 dígitos.
     * @param {string} shadow - O shadow a ser gravado, em formato hexadecimal. Deve ter o tamanho correto de acordo com a versão do SVMK.
     * @param {boolean} overwrite - Indica se deve sobrescrever um shadow existente. Se `false` e já existir um shadow, a operação falhará.
     * @param {string} path - Atributo opcional com o path para o utilitário dinamonh.exe.
     * @returns {Promise<SucessResponseNH | ErrorResponseNH>} Uma Promise que resolve com um objeto `SucessResponseNH` em caso de sucesso, ou rejeita com um objeto `ErrorResponseNH` em caso de erro.
     *
     * @throws {HsmError} Se ocorrer um erro, como:
     *   - PIN inválido.
     *   - Shadow inválido (formato incorreto, tamanho incorreto).
     *   - Tentativa de sobrescrever um shadow existente quando `overwrite` é `false`.
     *
     * @remarks
     * <span style="color: orange; font-weight: bold;">**OBS**: Para realizar esta operação, é necessário instalar o HSM Client na opção Completa no dispositivo. Você pode fazer o download do <a href="https://docs.dinamonetworks.io/hsm/soft_client/downloads/" style="color: ciano; font-weight: bold; text-decoration: underline;">HSM Client</a> através do link. Além disso, é necessário utilizar uma leitora de smartcards certificada pela Dinamo Networks.</span>
     *
     * <span style="color: orange; font-weight: bold;">**OBS**:Embora seja possível indicar o path do Dinamo Native Host manualmente por meio do atributo path, a Dinamo Networks recomenda seu uso apenas em casos de restrição severa ao registro do Windows ou alterações no método default de instalação do cliente Dinamo</span>
     *
     * O shadow fornecido será gravado no smart card, permitindo que ele seja usado para autenticação e outras operações. Certifique-se de que o shadow seja válido e tenha o tamanho correto de acordo com a versão do SVMK.
     */
    writeScSVMK(pin: string, shadow: string, overwrite: boolean, path?: string): Promise<SucessResponseNH | ErrorResponseNH>;
    /**
     * Apaga o conteúdo de um smart card.
     *
     * @param {string} pin - O PIN do smart card. Deve ser uma string numérica com exatamente 8 dígitos.
     * @param {string} path - Atributo opcional com o path para o utilitário dinamonh.exe.
     * @returns {Promise<SucessResponseNH | ErrorResponseNH>} Uma Promise que resolve com um objeto `SucessResponseNH` em caso de sucesso, ou rejeita com um objeto `ErrorResponseNH` em caso de erro.
     *
     * @throws {HsmError} Se ocorrer um erro, como:
     *   - PIN inválido.
     *   - Erro de comunicação com o HSM.
     *   - Smart card não encontrado ou não acessível.
     *
     * @remarks
     * <span style="color: orange; font-weight: bold;">**OBS**: Para realizar esta operação, é necessário instalar o HSM Client na opção Completa no dispositivo. Você pode fazer o download do <a href="https://docs.dinamonetworks.io/hsm/soft_client/downloads/" style="color: ciano; font-weight: bold; text-decoration: underline;">HSM Client</a> através do link. Além disso, é necessário utilizar uma leitora de smartcards certificada pela Dinamo Networks.</span>
     *
     * <span style="color: orange; font-weight: bold;">**OBS**:Embora seja possível indicar o path do Dinamo Native Host manualmente por meio do atributo path, a Dinamo Networks recomenda seu uso apenas em casos de restrição severa ao registro do Windows ou alterações no método default de instalação do cliente Dinamo</span>
     *
     * **Atenção:** Esta operação é irreversível e apagará todos os dados do smart card.
     * Certifique-se de que deseja apagar o smart card antes de chamar este método.
     */
    eraseSmartCard(pin: string, path?: string): Promise<SucessResponseNH | ErrorResponseNH>;
    /**
     * Lista os objetos armazenados no HSM.
     *
     * @returns Uma Promise que resolve para um array de strings, contendo
     *          lista dos objetos contidos na partição do HSM.
     *
     * @throws {HsmError} Se ocorrer um erro durante a comunicação com o HSM, como
     *                    problemas de conexão ou erros na resposta do HSM.
     *
     * @see Código de Exemplo: [Listando objetos em uma partição do HSM](<../../../../pages/Listando objetos em uma partição do HSM.md>)
     */
    listObjs(): Promise<string[] | null[]>;
    /**
     * Habilita o TLS Bundle no HSM
     *
     * @param {string} key - Id da chave privada em string.
     * @param {string} cert - Id do certificado em string.
     * @remarks
     * Se `key` e `cert` forem omitidos, o TLS Bundle será resetado para o estado padrão OEM.
     * @returns {Promise<SucessResponse>} Uma promessa que resolve com um objeto `SuccessResponse` em caso de sucesso, ou rejeita com um erro em caso de falha.
     * @throws {@link HsmError} Se ocorrer um erro durante a comunicação com o HSM.
     */
    setTlsBundle(key?: string, cert?: string): Promise<SucessResponse>;
    /**
     * Habilita segundo fator de autenticação (TFA) para um usuário
     * @param {string} user Identificador do usuário
     * @param {Buffer} der Certificado utilizado para habilitar x509.
     * @returns {Promise<SucessResponse>} Uma promessa que resolve com um objeto `SuccessResponse` em caso de sucesso, ou rejeita com um erro em caso de falha.
     * @throws {@link HsmError} Se ocorrer um erro durante a comunicação com o HSM.
     */
    setUserParam(user: string, der: Buffer): Promise<SucessResponse>;
    /**
     * Remove Segunda Fator de Autenticação (TFA) atribuído a um usuário
     * @param {string} user Identificador do usuário
     * @param {enums.TFA_TYPE} tfaType Identificador do TFA a ser removido.
     * @returns {Promise<SucessResponse>} Uma promessa que resolve com um objeto `SuccessResponse` em caso de sucesso, ou rejeita com um erro em caso de falha.
     * @throws {@link HsmError} Se ocorrer um erro durante a comunicação com o HSM.
     */
    deleteAuthSA(user: string, tfaType: enums.TFA_TYPE): Promise<SucessResponse>;
    /**
     * Recupera o ACL de um usuário.
     * @param {string} user Identificador do usuário
     * @returns {Promise<AclList>} Uma promessa que resolve com um objeto com lista de acls em caso de sucesso, ou rejeita com um erro em caso de falha.
     * @throws {@link HsmError} Se ocorrer um erro durante a comunicação com o HSM.
     *
     * @see Código de Exemplo: [Recuperando ACL's de um usuário numa partição do HSM](<../../../../pages/Recuperando ACL's de um usuário numa partição do HSM.md>)
     */
    getUserAcl(user: string): Promise<AclList>;
    /**
     * Atribui um Access Control List (ACL) para um usuário (trust relationship).
     *
     * @param {string} user - The identifier of the user.
     * @param {enums.ACL_MASK[]} acl - Array com o conjunto de ACL's vinculadas ao usuário.
     * @returns {Promise<SucessResponse>} - Uma promessa que é resolvida com um objeto `SucessResponse`.
     * @throws {@link exceptions.HsmError} - Retornado se um erro é encontrado.
     *
     * @see Código de Exemplo: [Alterando permissões de um usuário numa partição do HSM (Relação de confiança)](<../../../../pages/Alterando permissões de um usuário numa partição do HSM (Relação de confiança).md>)
     */
    setUserAcl(user: string, acl: enums.ACL_MASK[]): Promise<SucessResponse>;
    /**
     * Lista Blobs armazenados na partição do HSM.
     * @returns {Promise<string[]>} - Promessa resolvida com um array de strings contendo uma lista de blobs armazenada na partição do HSM.
     * @throws {@link exceptions.HsmError} - Retornado caso um erro seja encontrado.
     *
     * @see Código de Exemplo: [Listando blobs em uma partição do HSM](<../../../../pages/Listando blobs em uma partição do HSM.md>)
     */
    listBlobs(): Promise<string[]>;
    /**
     * Retorna informações sobre um objeto armazenado no HSM.
     * @param objId - O identificador do objeto na partição do HSM.
     * @returns {Promise<ObjectInfo>} - Promessa resolvida com um objeto `ObjectInfo` contendo informações sobre o objeto.
     * @throws {@link exceptions.HsmError} - Retornado caso um erro seja encontrado.
     *
     * @see Código de Exemplo: [Recuperando informações de um objeto armazenado no HSM](<../../../../pages/Listando dados de um objeto em partição do HSM.md>)
     */
    getObjectInfo(objId: string): Promise<ObjectInfo>;
    /**
     * Retorna informações sobre um objeto armazenado no HSM, evitando possíveis ruídos no log ao tentar consultar objetos não existentes na partição.
     * @param objId - O identificador do objeto na partição do HSM.
     * @returns {Promise<ObjectInfo>} - Promessa resolvida com um objeto `ObjectInfo` contendo informações sobre o objeto.
     * @throws {@link exceptions.HsmError} - Retornado caso um erro seja encontrado.
     *
     * @see Código de Exemplo: [Recuperando informações de um objeto armazenado no HSM](<../../../../pages/Listando dados de um objeto em partição do HSM com o ModprobeListInfo.md>)
     */
    getObjectInfoModprobe(objId: string): Promise<ObjectInfo>;
}
