import * as enums from "../../enums";
export default interface Token {
    /**
     * Efetua a tokenização do dado informado, gerando um blob e o seu respectivo token.
     * @param {enums.MASK_TYPE} flags - Opções de geração.
     * @param {enums.CHECK_SUM_OPTIONS} cks - Define o tipo de checksum para a geração de token.
     * @param {enums.STR_FORMAT_PRESERVING_ENCRYPTION_OPTIONS} from - Define a base de representação da string UTF-8 do secret para o FPE (Format-Preserving-Encryption).
     * @param {enums.STR_FORMAT_PRESERVING_ENCRYPTION_OPTIONS} to - Define a base de representação da string do token para o FPE (Format-Preserving-Encryption)
     * @param {string} secret - O secret em UTF-8 que deverá respeitar a base definida em _**from**_. Deverá ter tamanho mínimo de {@link constants.SVAULT_MIN_LEN} e máximo de {@link constants.SVAULT_MAX_LEN}.
     * @param {string} keyName - Nome da chave utilizada para a proteção dos dados.
     * @returns {Promise<Buffer>} - O token blob gerado.
     * @throws {exceptions.HsmError} - Caso ocorra algum erro na tokenização.
     */
    create(flags: enums.MASK_TYPE, cks: enums.CHECK_SUM_OPTIONS, from: enums.STR_FORMAT_PRESERVING_ENCRYPTION_OPTIONS, to: enums.STR_FORMAT_PRESERVING_ENCRYPTION_OPTIONS, secret: string, keyName: string): Promise<Buffer>;
    /**
     * Recupera o secret de um dado tokenizado utilizando um token blob. Este método também permite a recuperação do secret mascarados.
     * @param {Buffer} maskedData - O token blob que deverá ser utilizado para a recuperação do secret.
     * @param {string} keyName - Nome da chave utilizada para a tokenização dos dados.
     * @param {string | null} mask - Máscara utilizada para a tokenização dos dados, se foi utilizado.
     * @returns {Promise<Buffer>} - O secret recuperado.
     * @throws {exceptions.HsmError} - Caso ocorra algum erro na recuperação do secret.
     */
    getSecret(maskedData: Buffer, keyName: string, mask?: string | null): Promise<Buffer>;
    /**
     * Recupera o token de um dado tokenizado utilizando um token blob. Este método também permite a recuperação do token mascarados.
     * @param {Buffer} maskedData - O token blob que deverá ser utilizado para a recuperação do token.
     * @param {string} keyName - Nome da chave utilizada para a tokenização dos dados.
     * @param {string | null} mask - Máscara utilizada para a tokenização dos dados, se foi utilizado.
     * @returns {Promise<Buffer>} - O token recuperado.
     * @throws {exceptions.HsmError} - Caso ocorra algum erro na recuperação do token.
     */
    getToken(maskedData: Buffer, keyName: string, mask?: string | null): Promise<Buffer>;
}
