import * as enums from "../../enums";
export default interface Hash {
    /**
     * Inicializa um contexto de hash para ser usado com um fluxo de dados.
     * @param {enums.HASH_ALGORITHMS} algorithm - Algoritmo de hash
     * @param {string | null} keyName - Nome da chave de hash
     * @returns {Promise<Buffer>} - Buffer contendo o contexto de hash
     * @throws {@link exceptions.HsmError} Caso ocorra algum erro na operação.
     */
    create(algorithm: enums.HASH_ALGORITHMS, keyName?: string | null): Promise<Buffer>;
    /**
     * Adiciona dados a um determinado contexto de hash. Essa função pode ser chamada diversas vezes para adicionar dados discontinuos.
     * @param {Buffer} hash - Contexto de hash
     * @param {Buffer} data - Dados a serem adicionados ao contexto de hash
     * @return {Promise<boolean>} - True se os dados foram adicionados com sucesso.
     * @throws {@link exceptions.HsmError} Caso não seja possível adicionar os dados ao contexto de hash ou caso ocorra algum erro na operação.
     */
    hashData(hash: Buffer, data: Buffer): Promise<boolean>;
    /**
     * Finaliza o contexto de hash e retorna o valor do hash.
     * @param {Buffer} hash - Contexto de hash
     * @return {Promise<Buffer>} - Hash calculada
     * @throws {@link exceptions.HsmError} Caso ocorra algum erro na operação.
     */
    get(hash: Buffer): Promise<Buffer>;
}
