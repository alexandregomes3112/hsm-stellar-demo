import * as interfaces from ".";
export default interface Hsm {
    /**
     * Indica se o client está se conectando com o HSM
     * @type {boolean}
     * @readonly
     * @default false
     */
    connecting: boolean;
    /**
     * Indica se o client está conectado com o HSM
     * @type {boolean}
     * @readonly
     * @default false
     */
    connected: boolean;
    /**
     * Objeto para manipulação de chaves
     * @type {interfaces.key.Key} - Instância da classe Key
     */
    key: interfaces.key.Key;
    /**
     * Objeto para manipulação de hash
     * @type {interfaces.Hash} - Instância da classe Hash
     */
    /**
     * Objeto para manipulação de chaves Bip 32
     * @type {interfaces..blockchain.Blockchain} - Instância da classe Blockchain
     */
    blockchain: interfaces.blockchain.Blockchain;
    /**
     * Objeto para manipulação de criptografia
     * @type {interfaces.cryptography.Cryptography} - Instância da classe Cryptography
     */
    cryptography: interfaces.cryptography.Cryptography;
    /**
     * Objeto para manipulação de usuário
     * @type {interfaces.user.User} - Instância da classe User
     */
    user: interfaces.user.User;
    /**
     * Objeto para manipulação do OCRA
     * @type {interfaces.ocra.Ocra} - Instância da classe Ocra
     */
    ocra: interfaces.ocra.Ocra;
    /**
     * Objeto para manipulação de management
     * @type {interfaces.management.Management} - Instância da classe Management
     */
    management: interfaces.management.Management;
    /**
     * Finaliza a conexão com o HSM
     * @returns {Promise<boolean>} - Retorna true se a conexão foi finalizada com sucesso
     * @throws {exceptions.HsmError} - Lança exceção caso o client não esteja conectado com o HSM
     */
    disconnect(): Promise<boolean>;
}
