/**
 * Tipo que representa a resposta do comando `getShadow`.
 * @property {0 | 1 | 2} status - Status da operação, onde 0 - Sucesso, 1 - Erro e 2 - Comando desconhecido.
 * @property {number} version - Versão da SVMK.
 * @property {string} shadow - Shadow em formato hexadecimal.
 * @property {number} m - Valor de 'm' no esquema M-of-N.
 * @property {number} n - Valor de 'n' no esquema M-of-N.
 * @property {number} pos - Posição no esquema M-of-N.
 * @property {string} shadow_material - Material do Shadow em formato hexadecimal.
 * @property {number} rcode - Código de erro, presente apenas se `status` for `1` (Erro).
 */
export type GetShadowResponse = {
    status: 0 | 1 | 2;
    version?: number;
    shadow?: string;
    m?: number;
    n?: number;
    pos?: number;
    shadow_material?: string;
    rcode?: number;
};
/**
 * Estrutura de informações da divisão de um segredo M de N.
 * @property {Buffer} secret Segredo que dividido em n partes.
 * @property {Buffer} entropy Bytes aleatórios gerados pelo HSM e incluídos no esquema de compartilhamento.
 * @property {Buffer[]} parts Partes geradas no M de N.
 */
export type MofNSplit = {
    secret: Buffer;
    entropy: Buffer;
    parts: Buffer[];
};
/**
 * Saída do Método generateSVMK
 * @property {number} SVMKVersion Versão da SVMK.
 * @property {string | null} secret Segredo dividido em partes retornado como hexadecimal. Não é retornado para SVMK v2.
 * @property {Buffer | null} entropy Conjunto de dados aleatórios gerados pelo HSM para adicionar entropia. Não é retornado para SVMK v2.
 * @property {number} m Valor de 'm' no esquema M-of-N.
 * @property {number} n Valor de 'n' no esquema M-of-N.
 * @property {string[]} parts Conjunto de partes que representam o segredo dividido
 */
export type genSVMKResponse = {
    SVMKVersion: number;
    secret: string | null;
    entropy: Buffer | null;
    m: number;
    n: number;
    parts: string[];
};
/**
 * Saída do método getScInfo
 * @typedef {object} ScInfo Informações sobre o smart card.
 * @property {string} ATR  Answer To Reset -  Resposta de reset do cartão.
 * @property {string} CSN1 Número de série do cartão 1.
 * @property {string} CSN2 Número de série do cartão 2.
 * @property {string} CardChipVersion Versão do chip do cartão.
 * @property {string} CardFamily Família do cartão.
 * @property {string} CardOSVersion Versão do sistema operacional do cartão.
 * @property {string} CardProductName Nome do produto do cartão.
 * @property {string} CardProgramVersion Versão do programa do cartão.
 * @property {number} HasLegacyCard Indica se o cartão é legado.
 * @property {number} HasPINInfo Indica se o cartão possui informações de PIN.
 * @property {string} IRN Número de referência interno.
 * @property {number} IsFormatted Indica se o cartão está formatado.
 * @property {number} IsOEMKeyAvailable Indica se a chave OEM está disponível.
 * @property {number} IsPINLocked Indica se o PIN está bloqueado.
 * @property {number} IsPINSMCOn Indica se o PIN SMC está ativado.
 * @property {string} LockByte1 Byte de bloqueio 1.
 * @property {string} LockByte2 Byte de bloqueio 2.
 * @property {number} PINCKS PIN Checksum.
 * @property {number} PINMMPN PIN Maximo tentativas incorretas de PIN.
 * @property {number} PINSCR PIN Security Related Counter.
 * @property {number} PINUCR PIN Unblocking Related Counter.
 * @property {number} status Status da operação.
 */
export type ScInfo = {
    ATR: string;
    CSN1: string;
    CSN2: string;
    CardChipVersion: string;
    CardFamily: string;
    CardOSVersion: string;
    CardProductName: string;
    CardProgramVersion: string;
    HasLegacyCard: number;
    HasPINInfo: number;
    IRN: string;
    IsFormatted: number;
    IsOEMKeyAvailable: number;
    IsPINLocked: number;
    IsPINSMCOn: number;
    LockByte1: string;
    LockByte2: string;
    PINCKS: number;
    PINMMPN: number;
    PINSCR: number;
    PINUCR: number;
    status: number;
};
/**
 * @typedef {object} ErrorResponseNH  Resposta de erro da API.
 * @property {1} status  Status da operação (1 indica erro).
 * @property {number} rcode Código de erro específico.
 */
export type ErrorResponseNH = {
    status: 1;
    rcode: number;
};
/**
 * @typedef {object} SucessResponseNH Resposta de sucesso da API.
 * @property {number} status Status da operação (0 para sucesso)
 */
export type SucessResponseNH = {
    status: number;
};
/**
 * @typedef {object} ScLabel Resposta à consulta de label de um Smart Card.
 * @property {number} status Status da operação (0 para sucesso)
 * @property {string} label Label do Smart Card
 */
export type ScLabel = SucessResponseNH & {
    label: string;
};
/**
 * @internal
 * Tipo base para os parâmetros do comando
 * @property {string} command - O comando a ser executado.
 */
export type CommandParams = {
    command: string;
};
/**
 * @internal
 * Parâmetros para o comando getLabel
 * @property {string} pin - O PIN do smart card.
 */
export type GetLabelParams = CommandParams & {
    pin: string;
};
/**
 * @internal
 * Parâmetros para o comando scLabel
 * @property {string} pin - O PIN do smart card.
 */
export type EraseScParams = CommandParams & {
    pin: string;
};
/**
 * @internal
 * Parâmetros para o comando setLabel
 * @property {string} pin - O PIN do smart card.
 * @property {string} label - O novo label do smart card.
 */
export type SetLabelParams = CommandParams & {
    pin: string;
    label: string;
};
/**
 * @internal
 * Parâmetros para o comando changePin
 * @property {string} old_pin - O PIN antigo do smart card.
 * @property {string} new_pin - O novo PIN do smart card.
 */
export type ChangePinParams = CommandParams & {
    old_pin: string;
    new_pin: string;
};
/**
 * @internal
 * Parâmetros para o comando getScInfo - não possui parâmetros adicionais.
 */
export type GetScInfoParams = CommandParams;
/**
 * @internal
 * Parâmetros para o comando getShadow.
 * @property {string} pin - O PIN do smart card.
 */
export type GetShadowParams = CommandParams & {
    pin: string;
};
/**
 * @internal
 * Parâmetros para o comando writeSvmk.
 * @property {string} command - O comando a ser executado 'writeSvmk'.
 * @property {string} pin - O PIN do smart card. Deve ser uma string numérica com exatamente 8 dígitos.
 * @property {string} shadow - A shadow a ser gravada, em formato hexadecimal. Deve ter o tamanho correto de acordo com a versão.
 * @property {boolean} overwrite - Indica se deve sobrescrever uma shadow existente.
 * @property {number} version - A versão do SVMK (1 ou 2).
 */
export type WriteSvmkParams = {
    command: 'writeSvmk';
    pin: string;
    shadow: string;
    overwrite: boolean;
    version: number;
};
/**
 * Retorno de sucesso realizado pela api
 * @property {string} code Código de sucesso retornado pelo HSM
 * @param {number} status Status da requisição 0 - Sucesso, 1 - Insucesso
 * @property {string} message Mensagem de sucesso retornada pela API
 */
export type SucessResponse = {
    code?: string;
    status: number;
    message: string;
};
/**
 * Representa a lista de ACL's de um usuário.
 * @typedef {object} AclList
 * @property {ArrayBuffer} acl - The ACL data in an ArrayBuffer.
 * @property {string[]} aclList - An array of ACL names.
 */
export type AclList = {
    acl: ArrayBuffer;
    aclList: string[];
};
/**
 * Representa lista de atributos relacionados a um objeto.
 * @typedef {object} Attributes
 * @property {boolean} OBJ_NOP - Objeto de uso geral.
 * @property {boolean} CMB - Objeto compatível com o módulo blockchain.
 * @property {boolean} EXPORTABLE - Objeto exportável.
 * @property {boolean} TEMPORARY - Objeto temporário.
 * @property {boolean} OATH - Objeto compatível com OATH.
 * @property {boolean} OATH_USE_TIME - Objeto compatível com OATH com uso de tempo.
 * @property {boolean} PKCS11 - Objeto do tipo PKCS11.
 * @property {boolean} RSA_PUB_EXP3 - Objeto do tipo RSA com expoente 3.
 * @property {boolean} SPB - Objeto compatível com módulo SPB.
 * @property {boolean} HSM_GEN - Objeto gerado pelo HSM.
 * @property {boolean} TSP.
 */
export type Attributes = {
    OBJ_NOP: boolean;
    CMB: boolean;
    EXPORTABLE: boolean;
    TEMPORARY: boolean;
    OATH: boolean;
    OATH_USE_TIME: boolean;
    PKCS11: boolean;
    RSA_PUB_EXP3: boolean;
    SPB: boolean;
    HSM_GEN: boolean;
    TSP: boolean;
};
/**
 * Representa a lista de atributos de um objeto.
 * @typedef {object} AttributesAUP
 * @property {Attributes} attributes - Atributos de um objeto.
 * @property {string} aup - AUP de um objeto.
 */
export type AttributesAUP = {
    attributes: Attributes;
    aup: string;
};
/**
 * Representa o conjunto de informações de um objeto.
 * @typedef {object} ObjectInfo
 * @property {string} type - Tipo do objeto.
 * @property {number} version - Versão do objeto.
 * @property {AttributesAUP} attributes - Atributos e AUP do objeto.
 */
export type ObjectInfo = {
    type: string;
    version: number;
    attributes: AttributesAUP;
};
